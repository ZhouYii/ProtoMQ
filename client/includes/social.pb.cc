// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: social.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "social.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace netmsg {

namespace {

const ::google::protobuf::Descriptor* AppRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppRequest_RegisterMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppRequest_RegisterMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppRequest_LoginMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppRequest_LoginMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppRequest_CreateEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppRequest_CreateEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppRequest_EventAccept_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppRequest_EventAccept_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppRequest_EventReject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppRequest_EventReject_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppRequest_EventInvite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppRequest_EventInvite_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppRequest_PollInvitedEvents_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppRequest_PollInvitedEvents_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppRequest_PollAcceptedEvents_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppRequest_PollAcceptedEvents_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppRequest_FriendRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppRequest_FriendRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppRequest_AcceptFriendRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppRequest_AcceptFriendRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppRequest_AlbumPhoto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppRequest_AlbumPhoto_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppRequest_PhotoAlbum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppRequest_PhotoAlbum_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppRequest_UpdateProfile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppRequest_UpdateProfile_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AppRequest_MessageType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* AppReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppReply_EventUUID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppReply_EventUUID_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppReply_User_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppReply_User_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppReply_FriendRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppReply_FriendRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppReply_EventInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppReply_EventInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AppReply_ResponseType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_social_2eproto() {
  protobuf_AddDesc_social_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "social.proto");
  GOOGLE_CHECK(file != NULL);
  AppRequest_descriptor_ = file->message_type(0);
  static const int AppRequest_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRequest, phone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRequest, msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRequest, reg_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRequest, login_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRequest, create_event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRequest, accept_event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRequest, reject_event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRequest, invite_event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRequest, poll_invited_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRequest, poll_accepted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRequest, friend_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRequest, accept_friend_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRequest, update_profile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRequest, request_user_info_),
  };
  AppRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppRequest_descriptor_,
      AppRequest::default_instance_,
      AppRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppRequest));
  AppRequest_RegisterMessage_descriptor_ = AppRequest_descriptor_->nested_type(0);
  static const int AppRequest_RegisterMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRequest_RegisterMessage, password_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRequest_RegisterMessage, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRequest_RegisterMessage, is_male_),
  };
  AppRequest_RegisterMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppRequest_RegisterMessage_descriptor_,
      AppRequest_RegisterMessage::default_instance_,
      AppRequest_RegisterMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRequest_RegisterMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRequest_RegisterMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppRequest_RegisterMessage));
  AppRequest_LoginMessage_descriptor_ = AppRequest_descriptor_->nested_type(1);
  static const int AppRequest_LoginMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRequest_LoginMessage, password_hash_),
  };
  AppRequest_LoginMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppRequest_LoginMessage_descriptor_,
      AppRequest_LoginMessage::default_instance_,
      AppRequest_LoginMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRequest_LoginMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRequest_LoginMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppRequest_LoginMessage));
  AppRequest_CreateEvent_descriptor_ = AppRequest_descriptor_->nested_type(2);
  static const int AppRequest_CreateEvent_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRequest_CreateEvent, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRequest_CreateEvent, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRequest_CreateEvent, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRequest_CreateEvent, is_public_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRequest_CreateEvent, event_uuid1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRequest_CreateEvent, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRequest_CreateEvent, invited_users_),
  };
  AppRequest_CreateEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppRequest_CreateEvent_descriptor_,
      AppRequest_CreateEvent::default_instance_,
      AppRequest_CreateEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRequest_CreateEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRequest_CreateEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppRequest_CreateEvent));
  AppRequest_EventAccept_descriptor_ = AppRequest_descriptor_->nested_type(3);
  static const int AppRequest_EventAccept_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRequest_EventAccept, event_uuid1_),
  };
  AppRequest_EventAccept_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppRequest_EventAccept_descriptor_,
      AppRequest_EventAccept::default_instance_,
      AppRequest_EventAccept_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRequest_EventAccept, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRequest_EventAccept, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppRequest_EventAccept));
  AppRequest_EventReject_descriptor_ = AppRequest_descriptor_->nested_type(4);
  static const int AppRequest_EventReject_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRequest_EventReject, event_uuid1_),
  };
  AppRequest_EventReject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppRequest_EventReject_descriptor_,
      AppRequest_EventReject::default_instance_,
      AppRequest_EventReject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRequest_EventReject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRequest_EventReject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppRequest_EventReject));
  AppRequest_EventInvite_descriptor_ = AppRequest_descriptor_->nested_type(5);
  static const int AppRequest_EventInvite_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRequest_EventInvite, event_uuid1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRequest_EventInvite, invited_users_),
  };
  AppRequest_EventInvite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppRequest_EventInvite_descriptor_,
      AppRequest_EventInvite::default_instance_,
      AppRequest_EventInvite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRequest_EventInvite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRequest_EventInvite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppRequest_EventInvite));
  AppRequest_PollInvitedEvents_descriptor_ = AppRequest_descriptor_->nested_type(6);
  static const int AppRequest_PollInvitedEvents_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRequest_PollInvitedEvents, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRequest_PollInvitedEvents, amount_),
  };
  AppRequest_PollInvitedEvents_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppRequest_PollInvitedEvents_descriptor_,
      AppRequest_PollInvitedEvents::default_instance_,
      AppRequest_PollInvitedEvents_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRequest_PollInvitedEvents, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRequest_PollInvitedEvents, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppRequest_PollInvitedEvents));
  AppRequest_PollAcceptedEvents_descriptor_ = AppRequest_descriptor_->nested_type(7);
  static const int AppRequest_PollAcceptedEvents_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRequest_PollAcceptedEvents, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRequest_PollAcceptedEvents, amount_),
  };
  AppRequest_PollAcceptedEvents_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppRequest_PollAcceptedEvents_descriptor_,
      AppRequest_PollAcceptedEvents::default_instance_,
      AppRequest_PollAcceptedEvents_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRequest_PollAcceptedEvents, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRequest_PollAcceptedEvents, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppRequest_PollAcceptedEvents));
  AppRequest_FriendRequest_descriptor_ = AppRequest_descriptor_->nested_type(8);
  static const int AppRequest_FriendRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRequest_FriendRequest, destination_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRequest_FriendRequest, message_),
  };
  AppRequest_FriendRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppRequest_FriendRequest_descriptor_,
      AppRequest_FriendRequest::default_instance_,
      AppRequest_FriendRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRequest_FriendRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRequest_FriendRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppRequest_FriendRequest));
  AppRequest_AcceptFriendRequest_descriptor_ = AppRequest_descriptor_->nested_type(9);
  static const int AppRequest_AcceptFriendRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRequest_AcceptFriendRequest, requesting_user_id_),
  };
  AppRequest_AcceptFriendRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppRequest_AcceptFriendRequest_descriptor_,
      AppRequest_AcceptFriendRequest::default_instance_,
      AppRequest_AcceptFriendRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRequest_AcceptFriendRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRequest_AcceptFriendRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppRequest_AcceptFriendRequest));
  AppRequest_AlbumPhoto_descriptor_ = AppRequest_descriptor_->nested_type(10);
  static const int AppRequest_AlbumPhoto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRequest_AlbumPhoto, photo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRequest_AlbumPhoto, description_),
  };
  AppRequest_AlbumPhoto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppRequest_AlbumPhoto_descriptor_,
      AppRequest_AlbumPhoto::default_instance_,
      AppRequest_AlbumPhoto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRequest_AlbumPhoto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRequest_AlbumPhoto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppRequest_AlbumPhoto));
  AppRequest_PhotoAlbum_descriptor_ = AppRequest_descriptor_->nested_type(11);
  static const int AppRequest_PhotoAlbum_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRequest_PhotoAlbum, photos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRequest_PhotoAlbum, albumdescription_),
  };
  AppRequest_PhotoAlbum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppRequest_PhotoAlbum_descriptor_,
      AppRequest_PhotoAlbum::default_instance_,
      AppRequest_PhotoAlbum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRequest_PhotoAlbum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRequest_PhotoAlbum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppRequest_PhotoAlbum));
  AppRequest_UpdateProfile_descriptor_ = AppRequest_descriptor_->nested_type(12);
  static const int AppRequest_UpdateProfile_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRequest_UpdateProfile, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRequest_UpdateProfile, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRequest_UpdateProfile, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRequest_UpdateProfile, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRequest_UpdateProfile, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRequest_UpdateProfile, profile_photo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRequest_UpdateProfile, new_albums_),
  };
  AppRequest_UpdateProfile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppRequest_UpdateProfile_descriptor_,
      AppRequest_UpdateProfile::default_instance_,
      AppRequest_UpdateProfile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRequest_UpdateProfile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRequest_UpdateProfile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppRequest_UpdateProfile));
  AppRequest_MessageType_descriptor_ = AppRequest_descriptor_->enum_type(0);
  AppReply_descriptor_ = file->message_type(1);
  static const int AppReply_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppReply, response_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppReply, event_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppReply, users_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppReply, friend_requests_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppReply, event_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppReply, accepted_friends_),
  };
  AppReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppReply_descriptor_,
      AppReply::default_instance_,
      AppReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppReply));
  AppReply_EventUUID_descriptor_ = AppReply_descriptor_->nested_type(0);
  static const int AppReply_EventUUID_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppReply_EventUUID, event_uuid1_),
  };
  AppReply_EventUUID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppReply_EventUUID_descriptor_,
      AppReply_EventUUID::default_instance_,
      AppReply_EventUUID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppReply_EventUUID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppReply_EventUUID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppReply_EventUUID));
  AppReply_User_descriptor_ = AppReply_descriptor_->nested_type(1);
  static const int AppReply_User_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppReply_User, phone_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppReply_User, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppReply_User, is_male_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppReply_User, profile_photo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppReply_User, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppReply_User, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppReply_User, location_),
  };
  AppReply_User_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppReply_User_descriptor_,
      AppReply_User::default_instance_,
      AppReply_User_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppReply_User, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppReply_User, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppReply_User));
  AppReply_FriendRequest_descriptor_ = AppReply_descriptor_->nested_type(2);
  static const int AppReply_FriendRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppReply_FriendRequest, request_origin_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppReply_FriendRequest, request_message_),
  };
  AppReply_FriendRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppReply_FriendRequest_descriptor_,
      AppReply_FriendRequest::default_instance_,
      AppReply_FriendRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppReply_FriendRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppReply_FriendRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppReply_FriendRequest));
  AppReply_EventInfo_descriptor_ = AppReply_descriptor_->nested_type(3);
  static const int AppReply_EventInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppReply_EventInfo, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppReply_EventInfo, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppReply_EventInfo, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppReply_EventInfo, event_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppReply_EventInfo, is_public_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppReply_EventInfo, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppReply_EventInfo, accepted_users_),
  };
  AppReply_EventInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppReply_EventInfo_descriptor_,
      AppReply_EventInfo::default_instance_,
      AppReply_EventInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppReply_EventInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppReply_EventInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppReply_EventInfo));
  AppReply_ResponseType_descriptor_ = AppReply_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_social_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppRequest_descriptor_, &AppRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppRequest_RegisterMessage_descriptor_, &AppRequest_RegisterMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppRequest_LoginMessage_descriptor_, &AppRequest_LoginMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppRequest_CreateEvent_descriptor_, &AppRequest_CreateEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppRequest_EventAccept_descriptor_, &AppRequest_EventAccept::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppRequest_EventReject_descriptor_, &AppRequest_EventReject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppRequest_EventInvite_descriptor_, &AppRequest_EventInvite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppRequest_PollInvitedEvents_descriptor_, &AppRequest_PollInvitedEvents::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppRequest_PollAcceptedEvents_descriptor_, &AppRequest_PollAcceptedEvents::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppRequest_FriendRequest_descriptor_, &AppRequest_FriendRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppRequest_AcceptFriendRequest_descriptor_, &AppRequest_AcceptFriendRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppRequest_AlbumPhoto_descriptor_, &AppRequest_AlbumPhoto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppRequest_PhotoAlbum_descriptor_, &AppRequest_PhotoAlbum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppRequest_UpdateProfile_descriptor_, &AppRequest_UpdateProfile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppReply_descriptor_, &AppReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppReply_EventUUID_descriptor_, &AppReply_EventUUID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppReply_User_descriptor_, &AppReply_User::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppReply_FriendRequest_descriptor_, &AppReply_FriendRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppReply_EventInfo_descriptor_, &AppReply_EventInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_social_2eproto() {
  delete AppRequest::default_instance_;
  delete AppRequest_reflection_;
  delete AppRequest_RegisterMessage::default_instance_;
  delete AppRequest_RegisterMessage_reflection_;
  delete AppRequest_LoginMessage::default_instance_;
  delete AppRequest_LoginMessage_reflection_;
  delete AppRequest_CreateEvent::default_instance_;
  delete AppRequest_CreateEvent_reflection_;
  delete AppRequest_EventAccept::default_instance_;
  delete AppRequest_EventAccept_reflection_;
  delete AppRequest_EventReject::default_instance_;
  delete AppRequest_EventReject_reflection_;
  delete AppRequest_EventInvite::default_instance_;
  delete AppRequest_EventInvite_reflection_;
  delete AppRequest_PollInvitedEvents::default_instance_;
  delete AppRequest_PollInvitedEvents_reflection_;
  delete AppRequest_PollAcceptedEvents::default_instance_;
  delete AppRequest_PollAcceptedEvents_reflection_;
  delete AppRequest_FriendRequest::default_instance_;
  delete AppRequest_FriendRequest_reflection_;
  delete AppRequest_AcceptFriendRequest::default_instance_;
  delete AppRequest_AcceptFriendRequest_reflection_;
  delete AppRequest_AlbumPhoto::default_instance_;
  delete AppRequest_AlbumPhoto_reflection_;
  delete AppRequest_PhotoAlbum::default_instance_;
  delete AppRequest_PhotoAlbum_reflection_;
  delete AppRequest_UpdateProfile::default_instance_;
  delete AppRequest_UpdateProfile_reflection_;
  delete AppReply::default_instance_;
  delete AppReply_reflection_;
  delete AppReply_EventUUID::default_instance_;
  delete AppReply_EventUUID_reflection_;
  delete AppReply_User::default_instance_;
  delete AppReply_User_reflection_;
  delete AppReply_FriendRequest::default_instance_;
  delete AppReply_FriendRequest_reflection_;
  delete AppReply_EventInfo::default_instance_;
  delete AppReply_EventInfo_reflection_;
}

void protobuf_AddDesc_social_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014social.proto\022\006netmsg\"\305\017\n\nAppRequest\022\020\n"
    "\010phone_id\030\001 \002(\003\0220\n\010msg_type\030\002 \002(\0162\036.netm"
    "sg.AppRequest.MessageType\0223\n\007reg_msg\030\003 \001"
    "(\0132\".netmsg.AppRequest.RegisterMessage\0222"
    "\n\tlogin_msg\030\004 \001(\0132\037.netmsg.AppRequest.Lo"
    "ginMessage\0224\n\014create_event\030\005 \001(\0132\036.netms"
    "g.AppRequest.CreateEvent\0224\n\014accept_event"
    "\030\006 \001(\0132\036.netmsg.AppRequest.EventAccept\0224"
    "\n\014reject_event\030\007 \001(\0132\036.netmsg.AppRequest"
    ".EventReject\0224\n\014invite_event\030\010 \001(\0132\036.net"
    "msg.AppRequest.EventInvite\022:\n\014poll_invit"
    "ed\030\t \001(\0132$.netmsg.AppRequest.PollInvited"
    "Events\022<\n\rpoll_accepted\030\n \001(\0132%.netmsg.A"
    "ppRequest.PollAcceptedEvents\0228\n\016friend_r"
    "equest\030\013 \001(\0132 .netmsg.AppRequest.FriendR"
    "equest\022E\n\025accept_friend_request\030\014 \001(\0132&."
    "netmsg.AppRequest.AcceptFriendRequest\0228\n"
    "\016update_profile\030\r \001(\0132 .netmsg.AppReques"
    "t.UpdateProfile\022\031\n\021request_user_info\030\016 \003"
    "(\003\032K\n\017RegisterMessage\022\025\n\rpassword_hash\030\001"
    " \002(\t\022\020\n\010nickname\030\002 \002(\t\022\017\n\007is_male\030\003 \002(\010\032"
    "%\n\014LoginMessage\022\025\n\rpassword_hash\030\001 \002(\t\032\220"
    "\001\n\013CreateEvent\022\r\n\005title\030\001 \002(\t\022\020\n\010locatio"
    "n\030\002 \002(\t\022\014\n\004time\030\003 \002(\003\022\021\n\tis_public\030\004 \002(\010"
    "\022\023\n\013event_uuid1\030\005 \002(\014\022\023\n\013description\030\006 \002"
    "(\t\022\025\n\rinvited_users\030\007 \003(\003\032\"\n\013EventAccept"
    "\022\023\n\013event_uuid1\030\001 \002(\014\032\"\n\013EventReject\022\023\n\013"
    "event_uuid1\030\001 \002(\014\0329\n\013EventInvite\022\023\n\013even"
    "t_uuid1\030\001 \002(\014\022\025\n\rinvited_users\030\002 \003(\003\0323\n\021"
    "PollInvitedEvents\022\016\n\006offset\030\001 \001(\003\022\016\n\006amo"
    "unt\030\002 \001(\003\0324\n\022PollAcceptedEvents\022\016\n\006offse"
    "t\030\001 \001(\003\022\016\n\006amount\030\002 \001(\003\032:\n\rFriendRequest"
    "\022\030\n\020destination_user\030\001 \002(\003\022\017\n\007message\030\002 "
    "\002(\t\0321\n\023AcceptFriendRequest\022\032\n\022requesting"
    "_user_id\030\001 \002(\003\0320\n\nAlbumPhoto\022\r\n\005photo\030\001 "
    "\002(\014\022\023\n\013description\030\002 \001(\t\032U\n\nPhotoAlbum\022-"
    "\n\006photos\030\001 \003(\0132\035.netmsg.AppRequest.Album"
    "Photo\022\030\n\020AlbumDescription\030\002 \001(\t\032\263\001\n\rUpda"
    "teProfile\022\r\n\005email\030\001 \001(\t\022\023\n\013description\030"
    "\002 \001(\t\022\020\n\010location\030\003 \001(\t\022\020\n\010nickname\030\004 \001("
    "\t\022\020\n\010password\030\005 \001(\t\022\025\n\rprofile_photo\030\006 \001"
    "(\014\0221\n\nnew_albums\030\007 \003(\0132\035.netmsg.AppReque"
    "st.PhotoAlbum\"\276\002\n\013MessageType\022\022\n\016tFriend"
    "Request\020\001\022\026\n\022tGetFriendRequests\020\002\022\017\n\013tGe"
    "tFriends\020\003\022\026\n\022tPollNotifications\020\016\022\030\n\024tA"
    "cceptFriendRequest\020\004\022\020\n\014tEventCreate\020\005\022\020"
    "\n\014tEventInvite\020\006\022\020\n\014tEventAccept\020\007\022\020\n\014tE"
    "ventReject\020\010\022\021\n\rtRegistration\020\t\022\n\n\006tLogi"
    "n\020\n\022\022\n\016tUpdateProfile\020\013\022\027\n\023tPollAccepted"
    "Events\020\014\022\026\n\022tPollInvitedEvents\020\r\022\024\n\020tUse"
    "rInfoRequest\020\017\"\326\005\n\010AppReply\0224\n\rresponse_"
    "type\030\001 \002(\0162\035.netmsg.AppReply.ResponseTyp"
    "e\022.\n\nevent_uuid\030\002 \001(\0132\032.netmsg.AppReply."
    "EventUUID\022$\n\005users\030\003 \003(\0132\025.netmsg.AppRep"
    "ly.User\0227\n\017friend_requests\030\004 \003(\0132\036.netms"
    "g.AppReply.FriendRequest\022.\n\nevent_info\030\005"
    " \003(\0132\032.netmsg.AppReply.EventInfo\022\030\n\020acce"
    "pted_friends\030\006 \003(\003\032 \n\tEventUUID\022\023\n\013event"
    "_uuid1\030\001 \002(\014\032\214\001\n\004User\022\024\n\014phone_number\030\001 "
    "\002(\003\022\020\n\010nickname\030\002 \002(\t\022\017\n\007is_male\030\003 \002(\010\022\025"
    "\n\rprofile_photo\030\004 \001(\014\022\r\n\005email\030\005 \001(\t\022\023\n\013"
    "description\030\006 \001(\t\022\020\n\010location\030\007 \001(\t\032H\n\rF"
    "riendRequest\022\036\n\026request_origin_user_id\030\001"
    " \002(\003\022\027\n\017request_message\030\002 \002(\t\032\216\001\n\tEventI"
    "nfo\022\r\n\005title\030\001 \002(\t\022\020\n\010location\030\002 \002(\t\022\014\n\004"
    "time\030\003 \002(\003\022\022\n\nevent_uuid\030\004 \002(\014\022\021\n\tis_pub"
    "lic\030\005 \002(\010\022\023\n\013description\030\006 \002(\t\022\026\n\016accept"
    "ed_users\030\007 \003(\003\"/\n\014ResponseType\022\014\n\010tSucce"
    "ss\020\001\022\021\n\rtMissingInput\020\002", 2743);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "social.proto", &protobuf_RegisterTypes);
  AppRequest::default_instance_ = new AppRequest();
  AppRequest_RegisterMessage::default_instance_ = new AppRequest_RegisterMessage();
  AppRequest_LoginMessage::default_instance_ = new AppRequest_LoginMessage();
  AppRequest_CreateEvent::default_instance_ = new AppRequest_CreateEvent();
  AppRequest_EventAccept::default_instance_ = new AppRequest_EventAccept();
  AppRequest_EventReject::default_instance_ = new AppRequest_EventReject();
  AppRequest_EventInvite::default_instance_ = new AppRequest_EventInvite();
  AppRequest_PollInvitedEvents::default_instance_ = new AppRequest_PollInvitedEvents();
  AppRequest_PollAcceptedEvents::default_instance_ = new AppRequest_PollAcceptedEvents();
  AppRequest_FriendRequest::default_instance_ = new AppRequest_FriendRequest();
  AppRequest_AcceptFriendRequest::default_instance_ = new AppRequest_AcceptFriendRequest();
  AppRequest_AlbumPhoto::default_instance_ = new AppRequest_AlbumPhoto();
  AppRequest_PhotoAlbum::default_instance_ = new AppRequest_PhotoAlbum();
  AppRequest_UpdateProfile::default_instance_ = new AppRequest_UpdateProfile();
  AppReply::default_instance_ = new AppReply();
  AppReply_EventUUID::default_instance_ = new AppReply_EventUUID();
  AppReply_User::default_instance_ = new AppReply_User();
  AppReply_FriendRequest::default_instance_ = new AppReply_FriendRequest();
  AppReply_EventInfo::default_instance_ = new AppReply_EventInfo();
  AppRequest::default_instance_->InitAsDefaultInstance();
  AppRequest_RegisterMessage::default_instance_->InitAsDefaultInstance();
  AppRequest_LoginMessage::default_instance_->InitAsDefaultInstance();
  AppRequest_CreateEvent::default_instance_->InitAsDefaultInstance();
  AppRequest_EventAccept::default_instance_->InitAsDefaultInstance();
  AppRequest_EventReject::default_instance_->InitAsDefaultInstance();
  AppRequest_EventInvite::default_instance_->InitAsDefaultInstance();
  AppRequest_PollInvitedEvents::default_instance_->InitAsDefaultInstance();
  AppRequest_PollAcceptedEvents::default_instance_->InitAsDefaultInstance();
  AppRequest_FriendRequest::default_instance_->InitAsDefaultInstance();
  AppRequest_AcceptFriendRequest::default_instance_->InitAsDefaultInstance();
  AppRequest_AlbumPhoto::default_instance_->InitAsDefaultInstance();
  AppRequest_PhotoAlbum::default_instance_->InitAsDefaultInstance();
  AppRequest_UpdateProfile::default_instance_->InitAsDefaultInstance();
  AppReply::default_instance_->InitAsDefaultInstance();
  AppReply_EventUUID::default_instance_->InitAsDefaultInstance();
  AppReply_User::default_instance_->InitAsDefaultInstance();
  AppReply_FriendRequest::default_instance_->InitAsDefaultInstance();
  AppReply_EventInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_social_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_social_2eproto {
  StaticDescriptorInitializer_social_2eproto() {
    protobuf_AddDesc_social_2eproto();
  }
} static_descriptor_initializer_social_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* AppRequest_MessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppRequest_MessageType_descriptor_;
}
bool AppRequest_MessageType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const AppRequest_MessageType AppRequest::tFriendRequest;
const AppRequest_MessageType AppRequest::tGetFriendRequests;
const AppRequest_MessageType AppRequest::tGetFriends;
const AppRequest_MessageType AppRequest::tPollNotifications;
const AppRequest_MessageType AppRequest::tAcceptFriendRequest;
const AppRequest_MessageType AppRequest::tEventCreate;
const AppRequest_MessageType AppRequest::tEventInvite;
const AppRequest_MessageType AppRequest::tEventAccept;
const AppRequest_MessageType AppRequest::tEventReject;
const AppRequest_MessageType AppRequest::tRegistration;
const AppRequest_MessageType AppRequest::tLogin;
const AppRequest_MessageType AppRequest::tUpdateProfile;
const AppRequest_MessageType AppRequest::tPollAcceptedEvents;
const AppRequest_MessageType AppRequest::tPollInvitedEvents;
const AppRequest_MessageType AppRequest::tUserInfoRequest;
const AppRequest_MessageType AppRequest::MessageType_MIN;
const AppRequest_MessageType AppRequest::MessageType_MAX;
const int AppRequest::MessageType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int AppRequest_RegisterMessage::kPasswordHashFieldNumber;
const int AppRequest_RegisterMessage::kNicknameFieldNumber;
const int AppRequest_RegisterMessage::kIsMaleFieldNumber;
#endif  // !_MSC_VER

AppRequest_RegisterMessage::AppRequest_RegisterMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:netmsg.AppRequest.RegisterMessage)
}

void AppRequest_RegisterMessage::InitAsDefaultInstance() {
}

AppRequest_RegisterMessage::AppRequest_RegisterMessage(const AppRequest_RegisterMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:netmsg.AppRequest.RegisterMessage)
}

void AppRequest_RegisterMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  password_hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_male_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppRequest_RegisterMessage::~AppRequest_RegisterMessage() {
  // @@protoc_insertion_point(destructor:netmsg.AppRequest.RegisterMessage)
  SharedDtor();
}

void AppRequest_RegisterMessage::SharedDtor() {
  if (password_hash_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_hash_;
  }
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void AppRequest_RegisterMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppRequest_RegisterMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppRequest_RegisterMessage_descriptor_;
}

const AppRequest_RegisterMessage& AppRequest_RegisterMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_social_2eproto();
  return *default_instance_;
}

AppRequest_RegisterMessage* AppRequest_RegisterMessage::default_instance_ = NULL;

AppRequest_RegisterMessage* AppRequest_RegisterMessage::New() const {
  return new AppRequest_RegisterMessage;
}

void AppRequest_RegisterMessage::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_password_hash()) {
      if (password_hash_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        password_hash_->clear();
      }
    }
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
    is_male_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppRequest_RegisterMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netmsg.AppRequest.RegisterMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string password_hash = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password_hash()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password_hash().data(), this->password_hash().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "password_hash");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nickname;
        break;
      }

      // required string nickname = 2;
      case 2: {
        if (tag == 18) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_is_male;
        break;
      }

      // required bool is_male = 3;
      case 3: {
        if (tag == 24) {
         parse_is_male:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_male_)));
          set_has_is_male();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netmsg.AppRequest.RegisterMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netmsg.AppRequest.RegisterMessage)
  return false;
#undef DO_
}

void AppRequest_RegisterMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netmsg.AppRequest.RegisterMessage)
  // required string password_hash = 1;
  if (has_password_hash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password_hash().data(), this->password_hash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password_hash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->password_hash(), output);
  }

  // required string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nickname(), output);
  }

  // required bool is_male = 3;
  if (has_is_male()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_male(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:netmsg.AppRequest.RegisterMessage)
}

::google::protobuf::uint8* AppRequest_RegisterMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:netmsg.AppRequest.RegisterMessage)
  // required string password_hash = 1;
  if (has_password_hash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password_hash().data(), this->password_hash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password_hash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->password_hash(), target);
  }

  // required string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // required bool is_male = 3;
  if (has_is_male()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_male(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netmsg.AppRequest.RegisterMessage)
  return target;
}

int AppRequest_RegisterMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string password_hash = 1;
    if (has_password_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password_hash());
    }

    // required string nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // required bool is_male = 3;
    if (has_is_male()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppRequest_RegisterMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppRequest_RegisterMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppRequest_RegisterMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppRequest_RegisterMessage::MergeFrom(const AppRequest_RegisterMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_password_hash()) {
      set_password_hash(from.password_hash());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_is_male()) {
      set_is_male(from.is_male());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppRequest_RegisterMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppRequest_RegisterMessage::CopyFrom(const AppRequest_RegisterMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppRequest_RegisterMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void AppRequest_RegisterMessage::Swap(AppRequest_RegisterMessage* other) {
  if (other != this) {
    std::swap(password_hash_, other->password_hash_);
    std::swap(nickname_, other->nickname_);
    std::swap(is_male_, other->is_male_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppRequest_RegisterMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppRequest_RegisterMessage_descriptor_;
  metadata.reflection = AppRequest_RegisterMessage_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int AppRequest_LoginMessage::kPasswordHashFieldNumber;
#endif  // !_MSC_VER

AppRequest_LoginMessage::AppRequest_LoginMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:netmsg.AppRequest.LoginMessage)
}

void AppRequest_LoginMessage::InitAsDefaultInstance() {
}

AppRequest_LoginMessage::AppRequest_LoginMessage(const AppRequest_LoginMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:netmsg.AppRequest.LoginMessage)
}

void AppRequest_LoginMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  password_hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppRequest_LoginMessage::~AppRequest_LoginMessage() {
  // @@protoc_insertion_point(destructor:netmsg.AppRequest.LoginMessage)
  SharedDtor();
}

void AppRequest_LoginMessage::SharedDtor() {
  if (password_hash_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_hash_;
  }
  if (this != default_instance_) {
  }
}

void AppRequest_LoginMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppRequest_LoginMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppRequest_LoginMessage_descriptor_;
}

const AppRequest_LoginMessage& AppRequest_LoginMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_social_2eproto();
  return *default_instance_;
}

AppRequest_LoginMessage* AppRequest_LoginMessage::default_instance_ = NULL;

AppRequest_LoginMessage* AppRequest_LoginMessage::New() const {
  return new AppRequest_LoginMessage;
}

void AppRequest_LoginMessage::Clear() {
  if (has_password_hash()) {
    if (password_hash_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      password_hash_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppRequest_LoginMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netmsg.AppRequest.LoginMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string password_hash = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password_hash()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password_hash().data(), this->password_hash().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "password_hash");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netmsg.AppRequest.LoginMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netmsg.AppRequest.LoginMessage)
  return false;
#undef DO_
}

void AppRequest_LoginMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netmsg.AppRequest.LoginMessage)
  // required string password_hash = 1;
  if (has_password_hash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password_hash().data(), this->password_hash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password_hash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->password_hash(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:netmsg.AppRequest.LoginMessage)
}

::google::protobuf::uint8* AppRequest_LoginMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:netmsg.AppRequest.LoginMessage)
  // required string password_hash = 1;
  if (has_password_hash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password_hash().data(), this->password_hash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password_hash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->password_hash(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netmsg.AppRequest.LoginMessage)
  return target;
}

int AppRequest_LoginMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string password_hash = 1;
    if (has_password_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password_hash());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppRequest_LoginMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppRequest_LoginMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppRequest_LoginMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppRequest_LoginMessage::MergeFrom(const AppRequest_LoginMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_password_hash()) {
      set_password_hash(from.password_hash());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppRequest_LoginMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppRequest_LoginMessage::CopyFrom(const AppRequest_LoginMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppRequest_LoginMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AppRequest_LoginMessage::Swap(AppRequest_LoginMessage* other) {
  if (other != this) {
    std::swap(password_hash_, other->password_hash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppRequest_LoginMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppRequest_LoginMessage_descriptor_;
  metadata.reflection = AppRequest_LoginMessage_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int AppRequest_CreateEvent::kTitleFieldNumber;
const int AppRequest_CreateEvent::kLocationFieldNumber;
const int AppRequest_CreateEvent::kTimeFieldNumber;
const int AppRequest_CreateEvent::kIsPublicFieldNumber;
const int AppRequest_CreateEvent::kEventUuid1FieldNumber;
const int AppRequest_CreateEvent::kDescriptionFieldNumber;
const int AppRequest_CreateEvent::kInvitedUsersFieldNumber;
#endif  // !_MSC_VER

AppRequest_CreateEvent::AppRequest_CreateEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:netmsg.AppRequest.CreateEvent)
}

void AppRequest_CreateEvent::InitAsDefaultInstance() {
}

AppRequest_CreateEvent::AppRequest_CreateEvent(const AppRequest_CreateEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:netmsg.AppRequest.CreateEvent)
}

void AppRequest_CreateEvent::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = GOOGLE_LONGLONG(0);
  is_public_ = false;
  event_uuid1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppRequest_CreateEvent::~AppRequest_CreateEvent() {
  // @@protoc_insertion_point(destructor:netmsg.AppRequest.CreateEvent)
  SharedDtor();
}

void AppRequest_CreateEvent::SharedDtor() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (location_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete location_;
  }
  if (event_uuid1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete event_uuid1_;
  }
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (this != default_instance_) {
  }
}

void AppRequest_CreateEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppRequest_CreateEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppRequest_CreateEvent_descriptor_;
}

const AppRequest_CreateEvent& AppRequest_CreateEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_social_2eproto();
  return *default_instance_;
}

AppRequest_CreateEvent* AppRequest_CreateEvent::default_instance_ = NULL;

AppRequest_CreateEvent* AppRequest_CreateEvent::New() const {
  return new AppRequest_CreateEvent;
}

void AppRequest_CreateEvent::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        title_->clear();
      }
    }
    if (has_location()) {
      if (location_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        location_->clear();
      }
    }
    time_ = GOOGLE_LONGLONG(0);
    is_public_ = false;
    if (has_event_uuid1()) {
      if (event_uuid1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        event_uuid1_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        description_->clear();
      }
    }
  }
  invited_users_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppRequest_CreateEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netmsg.AppRequest.CreateEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string title = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_location;
        break;
      }

      // required string location = 2;
      case 2: {
        if (tag == 18) {
         parse_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->location().data(), this->location().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "location");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // required int64 time = 3;
      case 3: {
        if (tag == 24) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_is_public;
        break;
      }

      // required bool is_public = 4;
      case 4: {
        if (tag == 32) {
         parse_is_public:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_public_)));
          set_has_is_public();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_event_uuid1;
        break;
      }

      // required bytes event_uuid1 = 5;
      case 5: {
        if (tag == 42) {
         parse_event_uuid1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_event_uuid1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_description;
        break;
      }

      // required string description = 6;
      case 6: {
        if (tag == 50) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_invited_users;
        break;
      }

      // repeated int64 invited_users = 7;
      case 7: {
        if (tag == 56) {
         parse_invited_users:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 56, input, this->mutable_invited_users())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_invited_users())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_invited_users;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netmsg.AppRequest.CreateEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netmsg.AppRequest.CreateEvent)
  return false;
#undef DO_
}

void AppRequest_CreateEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netmsg.AppRequest.CreateEvent)
  // required string title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->title(), output);
  }

  // required string location = 2;
  if (has_location()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "location");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->location(), output);
  }

  // required int64 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->time(), output);
  }

  // required bool is_public = 4;
  if (has_is_public()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_public(), output);
  }

  // required bytes event_uuid1 = 5;
  if (has_event_uuid1()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->event_uuid1(), output);
  }

  // required string description = 6;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->description(), output);
  }

  // repeated int64 invited_users = 7;
  for (int i = 0; i < this->invited_users_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      7, this->invited_users(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:netmsg.AppRequest.CreateEvent)
}

::google::protobuf::uint8* AppRequest_CreateEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:netmsg.AppRequest.CreateEvent)
  // required string title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->title(), target);
  }

  // required string location = 2;
  if (has_location()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "location");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->location(), target);
  }

  // required int64 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->time(), target);
  }

  // required bool is_public = 4;
  if (has_is_public()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_public(), target);
  }

  // required bytes event_uuid1 = 5;
  if (has_event_uuid1()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->event_uuid1(), target);
  }

  // required string description = 6;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->description(), target);
  }

  // repeated int64 invited_users = 7;
  for (int i = 0; i < this->invited_users_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(7, this->invited_users(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netmsg.AppRequest.CreateEvent)
  return target;
}

int AppRequest_CreateEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string title = 1;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // required string location = 2;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->location());
    }

    // required int64 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // required bool is_public = 4;
    if (has_is_public()) {
      total_size += 1 + 1;
    }

    // required bytes event_uuid1 = 5;
    if (has_event_uuid1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->event_uuid1());
    }

    // required string description = 6;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

  }
  // repeated int64 invited_users = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->invited_users_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->invited_users(i));
    }
    total_size += 1 * this->invited_users_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppRequest_CreateEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppRequest_CreateEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppRequest_CreateEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppRequest_CreateEvent::MergeFrom(const AppRequest_CreateEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  invited_users_.MergeFrom(from.invited_users_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_location()) {
      set_location(from.location());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_is_public()) {
      set_is_public(from.is_public());
    }
    if (from.has_event_uuid1()) {
      set_event_uuid1(from.event_uuid1());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppRequest_CreateEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppRequest_CreateEvent::CopyFrom(const AppRequest_CreateEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppRequest_CreateEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void AppRequest_CreateEvent::Swap(AppRequest_CreateEvent* other) {
  if (other != this) {
    std::swap(title_, other->title_);
    std::swap(location_, other->location_);
    std::swap(time_, other->time_);
    std::swap(is_public_, other->is_public_);
    std::swap(event_uuid1_, other->event_uuid1_);
    std::swap(description_, other->description_);
    invited_users_.Swap(&other->invited_users_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppRequest_CreateEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppRequest_CreateEvent_descriptor_;
  metadata.reflection = AppRequest_CreateEvent_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int AppRequest_EventAccept::kEventUuid1FieldNumber;
#endif  // !_MSC_VER

AppRequest_EventAccept::AppRequest_EventAccept()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:netmsg.AppRequest.EventAccept)
}

void AppRequest_EventAccept::InitAsDefaultInstance() {
}

AppRequest_EventAccept::AppRequest_EventAccept(const AppRequest_EventAccept& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:netmsg.AppRequest.EventAccept)
}

void AppRequest_EventAccept::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  event_uuid1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppRequest_EventAccept::~AppRequest_EventAccept() {
  // @@protoc_insertion_point(destructor:netmsg.AppRequest.EventAccept)
  SharedDtor();
}

void AppRequest_EventAccept::SharedDtor() {
  if (event_uuid1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete event_uuid1_;
  }
  if (this != default_instance_) {
  }
}

void AppRequest_EventAccept::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppRequest_EventAccept::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppRequest_EventAccept_descriptor_;
}

const AppRequest_EventAccept& AppRequest_EventAccept::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_social_2eproto();
  return *default_instance_;
}

AppRequest_EventAccept* AppRequest_EventAccept::default_instance_ = NULL;

AppRequest_EventAccept* AppRequest_EventAccept::New() const {
  return new AppRequest_EventAccept;
}

void AppRequest_EventAccept::Clear() {
  if (has_event_uuid1()) {
    if (event_uuid1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      event_uuid1_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppRequest_EventAccept::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netmsg.AppRequest.EventAccept)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes event_uuid1 = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_event_uuid1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netmsg.AppRequest.EventAccept)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netmsg.AppRequest.EventAccept)
  return false;
#undef DO_
}

void AppRequest_EventAccept::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netmsg.AppRequest.EventAccept)
  // required bytes event_uuid1 = 1;
  if (has_event_uuid1()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->event_uuid1(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:netmsg.AppRequest.EventAccept)
}

::google::protobuf::uint8* AppRequest_EventAccept::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:netmsg.AppRequest.EventAccept)
  // required bytes event_uuid1 = 1;
  if (has_event_uuid1()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->event_uuid1(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netmsg.AppRequest.EventAccept)
  return target;
}

int AppRequest_EventAccept::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes event_uuid1 = 1;
    if (has_event_uuid1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->event_uuid1());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppRequest_EventAccept::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppRequest_EventAccept* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppRequest_EventAccept*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppRequest_EventAccept::MergeFrom(const AppRequest_EventAccept& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_uuid1()) {
      set_event_uuid1(from.event_uuid1());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppRequest_EventAccept::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppRequest_EventAccept::CopyFrom(const AppRequest_EventAccept& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppRequest_EventAccept::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AppRequest_EventAccept::Swap(AppRequest_EventAccept* other) {
  if (other != this) {
    std::swap(event_uuid1_, other->event_uuid1_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppRequest_EventAccept::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppRequest_EventAccept_descriptor_;
  metadata.reflection = AppRequest_EventAccept_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int AppRequest_EventReject::kEventUuid1FieldNumber;
#endif  // !_MSC_VER

AppRequest_EventReject::AppRequest_EventReject()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:netmsg.AppRequest.EventReject)
}

void AppRequest_EventReject::InitAsDefaultInstance() {
}

AppRequest_EventReject::AppRequest_EventReject(const AppRequest_EventReject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:netmsg.AppRequest.EventReject)
}

void AppRequest_EventReject::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  event_uuid1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppRequest_EventReject::~AppRequest_EventReject() {
  // @@protoc_insertion_point(destructor:netmsg.AppRequest.EventReject)
  SharedDtor();
}

void AppRequest_EventReject::SharedDtor() {
  if (event_uuid1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete event_uuid1_;
  }
  if (this != default_instance_) {
  }
}

void AppRequest_EventReject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppRequest_EventReject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppRequest_EventReject_descriptor_;
}

const AppRequest_EventReject& AppRequest_EventReject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_social_2eproto();
  return *default_instance_;
}

AppRequest_EventReject* AppRequest_EventReject::default_instance_ = NULL;

AppRequest_EventReject* AppRequest_EventReject::New() const {
  return new AppRequest_EventReject;
}

void AppRequest_EventReject::Clear() {
  if (has_event_uuid1()) {
    if (event_uuid1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      event_uuid1_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppRequest_EventReject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netmsg.AppRequest.EventReject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes event_uuid1 = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_event_uuid1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netmsg.AppRequest.EventReject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netmsg.AppRequest.EventReject)
  return false;
#undef DO_
}

void AppRequest_EventReject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netmsg.AppRequest.EventReject)
  // required bytes event_uuid1 = 1;
  if (has_event_uuid1()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->event_uuid1(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:netmsg.AppRequest.EventReject)
}

::google::protobuf::uint8* AppRequest_EventReject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:netmsg.AppRequest.EventReject)
  // required bytes event_uuid1 = 1;
  if (has_event_uuid1()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->event_uuid1(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netmsg.AppRequest.EventReject)
  return target;
}

int AppRequest_EventReject::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes event_uuid1 = 1;
    if (has_event_uuid1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->event_uuid1());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppRequest_EventReject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppRequest_EventReject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppRequest_EventReject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppRequest_EventReject::MergeFrom(const AppRequest_EventReject& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_uuid1()) {
      set_event_uuid1(from.event_uuid1());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppRequest_EventReject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppRequest_EventReject::CopyFrom(const AppRequest_EventReject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppRequest_EventReject::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AppRequest_EventReject::Swap(AppRequest_EventReject* other) {
  if (other != this) {
    std::swap(event_uuid1_, other->event_uuid1_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppRequest_EventReject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppRequest_EventReject_descriptor_;
  metadata.reflection = AppRequest_EventReject_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int AppRequest_EventInvite::kEventUuid1FieldNumber;
const int AppRequest_EventInvite::kInvitedUsersFieldNumber;
#endif  // !_MSC_VER

AppRequest_EventInvite::AppRequest_EventInvite()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:netmsg.AppRequest.EventInvite)
}

void AppRequest_EventInvite::InitAsDefaultInstance() {
}

AppRequest_EventInvite::AppRequest_EventInvite(const AppRequest_EventInvite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:netmsg.AppRequest.EventInvite)
}

void AppRequest_EventInvite::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  event_uuid1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppRequest_EventInvite::~AppRequest_EventInvite() {
  // @@protoc_insertion_point(destructor:netmsg.AppRequest.EventInvite)
  SharedDtor();
}

void AppRequest_EventInvite::SharedDtor() {
  if (event_uuid1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete event_uuid1_;
  }
  if (this != default_instance_) {
  }
}

void AppRequest_EventInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppRequest_EventInvite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppRequest_EventInvite_descriptor_;
}

const AppRequest_EventInvite& AppRequest_EventInvite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_social_2eproto();
  return *default_instance_;
}

AppRequest_EventInvite* AppRequest_EventInvite::default_instance_ = NULL;

AppRequest_EventInvite* AppRequest_EventInvite::New() const {
  return new AppRequest_EventInvite;
}

void AppRequest_EventInvite::Clear() {
  if (has_event_uuid1()) {
    if (event_uuid1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      event_uuid1_->clear();
    }
  }
  invited_users_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppRequest_EventInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netmsg.AppRequest.EventInvite)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes event_uuid1 = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_event_uuid1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_invited_users;
        break;
      }

      // repeated int64 invited_users = 2;
      case 2: {
        if (tag == 16) {
         parse_invited_users:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_invited_users())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_invited_users())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_invited_users;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netmsg.AppRequest.EventInvite)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netmsg.AppRequest.EventInvite)
  return false;
#undef DO_
}

void AppRequest_EventInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netmsg.AppRequest.EventInvite)
  // required bytes event_uuid1 = 1;
  if (has_event_uuid1()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->event_uuid1(), output);
  }

  // repeated int64 invited_users = 2;
  for (int i = 0; i < this->invited_users_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->invited_users(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:netmsg.AppRequest.EventInvite)
}

::google::protobuf::uint8* AppRequest_EventInvite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:netmsg.AppRequest.EventInvite)
  // required bytes event_uuid1 = 1;
  if (has_event_uuid1()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->event_uuid1(), target);
  }

  // repeated int64 invited_users = 2;
  for (int i = 0; i < this->invited_users_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(2, this->invited_users(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netmsg.AppRequest.EventInvite)
  return target;
}

int AppRequest_EventInvite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes event_uuid1 = 1;
    if (has_event_uuid1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->event_uuid1());
    }

  }
  // repeated int64 invited_users = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->invited_users_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->invited_users(i));
    }
    total_size += 1 * this->invited_users_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppRequest_EventInvite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppRequest_EventInvite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppRequest_EventInvite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppRequest_EventInvite::MergeFrom(const AppRequest_EventInvite& from) {
  GOOGLE_CHECK_NE(&from, this);
  invited_users_.MergeFrom(from.invited_users_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_uuid1()) {
      set_event_uuid1(from.event_uuid1());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppRequest_EventInvite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppRequest_EventInvite::CopyFrom(const AppRequest_EventInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppRequest_EventInvite::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AppRequest_EventInvite::Swap(AppRequest_EventInvite* other) {
  if (other != this) {
    std::swap(event_uuid1_, other->event_uuid1_);
    invited_users_.Swap(&other->invited_users_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppRequest_EventInvite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppRequest_EventInvite_descriptor_;
  metadata.reflection = AppRequest_EventInvite_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int AppRequest_PollInvitedEvents::kOffsetFieldNumber;
const int AppRequest_PollInvitedEvents::kAmountFieldNumber;
#endif  // !_MSC_VER

AppRequest_PollInvitedEvents::AppRequest_PollInvitedEvents()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:netmsg.AppRequest.PollInvitedEvents)
}

void AppRequest_PollInvitedEvents::InitAsDefaultInstance() {
}

AppRequest_PollInvitedEvents::AppRequest_PollInvitedEvents(const AppRequest_PollInvitedEvents& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:netmsg.AppRequest.PollInvitedEvents)
}

void AppRequest_PollInvitedEvents::SharedCtor() {
  _cached_size_ = 0;
  offset_ = GOOGLE_LONGLONG(0);
  amount_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppRequest_PollInvitedEvents::~AppRequest_PollInvitedEvents() {
  // @@protoc_insertion_point(destructor:netmsg.AppRequest.PollInvitedEvents)
  SharedDtor();
}

void AppRequest_PollInvitedEvents::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AppRequest_PollInvitedEvents::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppRequest_PollInvitedEvents::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppRequest_PollInvitedEvents_descriptor_;
}

const AppRequest_PollInvitedEvents& AppRequest_PollInvitedEvents::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_social_2eproto();
  return *default_instance_;
}

AppRequest_PollInvitedEvents* AppRequest_PollInvitedEvents::default_instance_ = NULL;

AppRequest_PollInvitedEvents* AppRequest_PollInvitedEvents::New() const {
  return new AppRequest_PollInvitedEvents;
}

void AppRequest_PollInvitedEvents::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AppRequest_PollInvitedEvents*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(offset_, amount_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppRequest_PollInvitedEvents::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netmsg.AppRequest.PollInvitedEvents)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 offset = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_amount;
        break;
      }

      // optional int64 amount = 2;
      case 2: {
        if (tag == 16) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netmsg.AppRequest.PollInvitedEvents)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netmsg.AppRequest.PollInvitedEvents)
  return false;
#undef DO_
}

void AppRequest_PollInvitedEvents::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netmsg.AppRequest.PollInvitedEvents)
  // optional int64 offset = 1;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->offset(), output);
  }

  // optional int64 amount = 2;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->amount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:netmsg.AppRequest.PollInvitedEvents)
}

::google::protobuf::uint8* AppRequest_PollInvitedEvents::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:netmsg.AppRequest.PollInvitedEvents)
  // optional int64 offset = 1;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->offset(), target);
  }

  // optional int64 amount = 2;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->amount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netmsg.AppRequest.PollInvitedEvents)
  return target;
}

int AppRequest_PollInvitedEvents::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 offset = 1;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->offset());
    }

    // optional int64 amount = 2;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->amount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppRequest_PollInvitedEvents::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppRequest_PollInvitedEvents* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppRequest_PollInvitedEvents*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppRequest_PollInvitedEvents::MergeFrom(const AppRequest_PollInvitedEvents& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppRequest_PollInvitedEvents::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppRequest_PollInvitedEvents::CopyFrom(const AppRequest_PollInvitedEvents& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppRequest_PollInvitedEvents::IsInitialized() const {

  return true;
}

void AppRequest_PollInvitedEvents::Swap(AppRequest_PollInvitedEvents* other) {
  if (other != this) {
    std::swap(offset_, other->offset_);
    std::swap(amount_, other->amount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppRequest_PollInvitedEvents::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppRequest_PollInvitedEvents_descriptor_;
  metadata.reflection = AppRequest_PollInvitedEvents_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int AppRequest_PollAcceptedEvents::kOffsetFieldNumber;
const int AppRequest_PollAcceptedEvents::kAmountFieldNumber;
#endif  // !_MSC_VER

AppRequest_PollAcceptedEvents::AppRequest_PollAcceptedEvents()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:netmsg.AppRequest.PollAcceptedEvents)
}

void AppRequest_PollAcceptedEvents::InitAsDefaultInstance() {
}

AppRequest_PollAcceptedEvents::AppRequest_PollAcceptedEvents(const AppRequest_PollAcceptedEvents& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:netmsg.AppRequest.PollAcceptedEvents)
}

void AppRequest_PollAcceptedEvents::SharedCtor() {
  _cached_size_ = 0;
  offset_ = GOOGLE_LONGLONG(0);
  amount_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppRequest_PollAcceptedEvents::~AppRequest_PollAcceptedEvents() {
  // @@protoc_insertion_point(destructor:netmsg.AppRequest.PollAcceptedEvents)
  SharedDtor();
}

void AppRequest_PollAcceptedEvents::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AppRequest_PollAcceptedEvents::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppRequest_PollAcceptedEvents::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppRequest_PollAcceptedEvents_descriptor_;
}

const AppRequest_PollAcceptedEvents& AppRequest_PollAcceptedEvents::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_social_2eproto();
  return *default_instance_;
}

AppRequest_PollAcceptedEvents* AppRequest_PollAcceptedEvents::default_instance_ = NULL;

AppRequest_PollAcceptedEvents* AppRequest_PollAcceptedEvents::New() const {
  return new AppRequest_PollAcceptedEvents;
}

void AppRequest_PollAcceptedEvents::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AppRequest_PollAcceptedEvents*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(offset_, amount_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppRequest_PollAcceptedEvents::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netmsg.AppRequest.PollAcceptedEvents)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 offset = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_amount;
        break;
      }

      // optional int64 amount = 2;
      case 2: {
        if (tag == 16) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netmsg.AppRequest.PollAcceptedEvents)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netmsg.AppRequest.PollAcceptedEvents)
  return false;
#undef DO_
}

void AppRequest_PollAcceptedEvents::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netmsg.AppRequest.PollAcceptedEvents)
  // optional int64 offset = 1;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->offset(), output);
  }

  // optional int64 amount = 2;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->amount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:netmsg.AppRequest.PollAcceptedEvents)
}

::google::protobuf::uint8* AppRequest_PollAcceptedEvents::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:netmsg.AppRequest.PollAcceptedEvents)
  // optional int64 offset = 1;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->offset(), target);
  }

  // optional int64 amount = 2;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->amount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netmsg.AppRequest.PollAcceptedEvents)
  return target;
}

int AppRequest_PollAcceptedEvents::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 offset = 1;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->offset());
    }

    // optional int64 amount = 2;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->amount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppRequest_PollAcceptedEvents::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppRequest_PollAcceptedEvents* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppRequest_PollAcceptedEvents*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppRequest_PollAcceptedEvents::MergeFrom(const AppRequest_PollAcceptedEvents& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppRequest_PollAcceptedEvents::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppRequest_PollAcceptedEvents::CopyFrom(const AppRequest_PollAcceptedEvents& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppRequest_PollAcceptedEvents::IsInitialized() const {

  return true;
}

void AppRequest_PollAcceptedEvents::Swap(AppRequest_PollAcceptedEvents* other) {
  if (other != this) {
    std::swap(offset_, other->offset_);
    std::swap(amount_, other->amount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppRequest_PollAcceptedEvents::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppRequest_PollAcceptedEvents_descriptor_;
  metadata.reflection = AppRequest_PollAcceptedEvents_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int AppRequest_FriendRequest::kDestinationUserFieldNumber;
const int AppRequest_FriendRequest::kMessageFieldNumber;
#endif  // !_MSC_VER

AppRequest_FriendRequest::AppRequest_FriendRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:netmsg.AppRequest.FriendRequest)
}

void AppRequest_FriendRequest::InitAsDefaultInstance() {
}

AppRequest_FriendRequest::AppRequest_FriendRequest(const AppRequest_FriendRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:netmsg.AppRequest.FriendRequest)
}

void AppRequest_FriendRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  destination_user_ = GOOGLE_LONGLONG(0);
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppRequest_FriendRequest::~AppRequest_FriendRequest() {
  // @@protoc_insertion_point(destructor:netmsg.AppRequest.FriendRequest)
  SharedDtor();
}

void AppRequest_FriendRequest::SharedDtor() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void AppRequest_FriendRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppRequest_FriendRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppRequest_FriendRequest_descriptor_;
}

const AppRequest_FriendRequest& AppRequest_FriendRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_social_2eproto();
  return *default_instance_;
}

AppRequest_FriendRequest* AppRequest_FriendRequest::default_instance_ = NULL;

AppRequest_FriendRequest* AppRequest_FriendRequest::New() const {
  return new AppRequest_FriendRequest;
}

void AppRequest_FriendRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    destination_user_ = GOOGLE_LONGLONG(0);
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppRequest_FriendRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netmsg.AppRequest.FriendRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 destination_user = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &destination_user_)));
          set_has_destination_user();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // required string message = 2;
      case 2: {
        if (tag == 18) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netmsg.AppRequest.FriendRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netmsg.AppRequest.FriendRequest)
  return false;
#undef DO_
}

void AppRequest_FriendRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netmsg.AppRequest.FriendRequest)
  // required int64 destination_user = 1;
  if (has_destination_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->destination_user(), output);
  }

  // required string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:netmsg.AppRequest.FriendRequest)
}

::google::protobuf::uint8* AppRequest_FriendRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:netmsg.AppRequest.FriendRequest)
  // required int64 destination_user = 1;
  if (has_destination_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->destination_user(), target);
  }

  // required string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netmsg.AppRequest.FriendRequest)
  return target;
}

int AppRequest_FriendRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 destination_user = 1;
    if (has_destination_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->destination_user());
    }

    // required string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppRequest_FriendRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppRequest_FriendRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppRequest_FriendRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppRequest_FriendRequest::MergeFrom(const AppRequest_FriendRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_destination_user()) {
      set_destination_user(from.destination_user());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppRequest_FriendRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppRequest_FriendRequest::CopyFrom(const AppRequest_FriendRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppRequest_FriendRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AppRequest_FriendRequest::Swap(AppRequest_FriendRequest* other) {
  if (other != this) {
    std::swap(destination_user_, other->destination_user_);
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppRequest_FriendRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppRequest_FriendRequest_descriptor_;
  metadata.reflection = AppRequest_FriendRequest_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int AppRequest_AcceptFriendRequest::kRequestingUserIdFieldNumber;
#endif  // !_MSC_VER

AppRequest_AcceptFriendRequest::AppRequest_AcceptFriendRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:netmsg.AppRequest.AcceptFriendRequest)
}

void AppRequest_AcceptFriendRequest::InitAsDefaultInstance() {
}

AppRequest_AcceptFriendRequest::AppRequest_AcceptFriendRequest(const AppRequest_AcceptFriendRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:netmsg.AppRequest.AcceptFriendRequest)
}

void AppRequest_AcceptFriendRequest::SharedCtor() {
  _cached_size_ = 0;
  requesting_user_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppRequest_AcceptFriendRequest::~AppRequest_AcceptFriendRequest() {
  // @@protoc_insertion_point(destructor:netmsg.AppRequest.AcceptFriendRequest)
  SharedDtor();
}

void AppRequest_AcceptFriendRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AppRequest_AcceptFriendRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppRequest_AcceptFriendRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppRequest_AcceptFriendRequest_descriptor_;
}

const AppRequest_AcceptFriendRequest& AppRequest_AcceptFriendRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_social_2eproto();
  return *default_instance_;
}

AppRequest_AcceptFriendRequest* AppRequest_AcceptFriendRequest::default_instance_ = NULL;

AppRequest_AcceptFriendRequest* AppRequest_AcceptFriendRequest::New() const {
  return new AppRequest_AcceptFriendRequest;
}

void AppRequest_AcceptFriendRequest::Clear() {
  requesting_user_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppRequest_AcceptFriendRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netmsg.AppRequest.AcceptFriendRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 requesting_user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &requesting_user_id_)));
          set_has_requesting_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netmsg.AppRequest.AcceptFriendRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netmsg.AppRequest.AcceptFriendRequest)
  return false;
#undef DO_
}

void AppRequest_AcceptFriendRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netmsg.AppRequest.AcceptFriendRequest)
  // required int64 requesting_user_id = 1;
  if (has_requesting_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->requesting_user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:netmsg.AppRequest.AcceptFriendRequest)
}

::google::protobuf::uint8* AppRequest_AcceptFriendRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:netmsg.AppRequest.AcceptFriendRequest)
  // required int64 requesting_user_id = 1;
  if (has_requesting_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->requesting_user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netmsg.AppRequest.AcceptFriendRequest)
  return target;
}

int AppRequest_AcceptFriendRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 requesting_user_id = 1;
    if (has_requesting_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->requesting_user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppRequest_AcceptFriendRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppRequest_AcceptFriendRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppRequest_AcceptFriendRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppRequest_AcceptFriendRequest::MergeFrom(const AppRequest_AcceptFriendRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requesting_user_id()) {
      set_requesting_user_id(from.requesting_user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppRequest_AcceptFriendRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppRequest_AcceptFriendRequest::CopyFrom(const AppRequest_AcceptFriendRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppRequest_AcceptFriendRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AppRequest_AcceptFriendRequest::Swap(AppRequest_AcceptFriendRequest* other) {
  if (other != this) {
    std::swap(requesting_user_id_, other->requesting_user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppRequest_AcceptFriendRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppRequest_AcceptFriendRequest_descriptor_;
  metadata.reflection = AppRequest_AcceptFriendRequest_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int AppRequest_AlbumPhoto::kPhotoFieldNumber;
const int AppRequest_AlbumPhoto::kDescriptionFieldNumber;
#endif  // !_MSC_VER

AppRequest_AlbumPhoto::AppRequest_AlbumPhoto()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:netmsg.AppRequest.AlbumPhoto)
}

void AppRequest_AlbumPhoto::InitAsDefaultInstance() {
}

AppRequest_AlbumPhoto::AppRequest_AlbumPhoto(const AppRequest_AlbumPhoto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:netmsg.AppRequest.AlbumPhoto)
}

void AppRequest_AlbumPhoto::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  photo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppRequest_AlbumPhoto::~AppRequest_AlbumPhoto() {
  // @@protoc_insertion_point(destructor:netmsg.AppRequest.AlbumPhoto)
  SharedDtor();
}

void AppRequest_AlbumPhoto::SharedDtor() {
  if (photo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete photo_;
  }
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (this != default_instance_) {
  }
}

void AppRequest_AlbumPhoto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppRequest_AlbumPhoto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppRequest_AlbumPhoto_descriptor_;
}

const AppRequest_AlbumPhoto& AppRequest_AlbumPhoto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_social_2eproto();
  return *default_instance_;
}

AppRequest_AlbumPhoto* AppRequest_AlbumPhoto::default_instance_ = NULL;

AppRequest_AlbumPhoto* AppRequest_AlbumPhoto::New() const {
  return new AppRequest_AlbumPhoto;
}

void AppRequest_AlbumPhoto::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_photo()) {
      if (photo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        photo_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        description_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppRequest_AlbumPhoto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netmsg.AppRequest.AlbumPhoto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes photo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_photo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_description;
        break;
      }

      // optional string description = 2;
      case 2: {
        if (tag == 18) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netmsg.AppRequest.AlbumPhoto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netmsg.AppRequest.AlbumPhoto)
  return false;
#undef DO_
}

void AppRequest_AlbumPhoto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netmsg.AppRequest.AlbumPhoto)
  // required bytes photo = 1;
  if (has_photo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->photo(), output);
  }

  // optional string description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->description(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:netmsg.AppRequest.AlbumPhoto)
}

::google::protobuf::uint8* AppRequest_AlbumPhoto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:netmsg.AppRequest.AlbumPhoto)
  // required bytes photo = 1;
  if (has_photo()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->photo(), target);
  }

  // optional string description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netmsg.AppRequest.AlbumPhoto)
  return target;
}

int AppRequest_AlbumPhoto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes photo = 1;
    if (has_photo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->photo());
    }

    // optional string description = 2;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppRequest_AlbumPhoto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppRequest_AlbumPhoto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppRequest_AlbumPhoto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppRequest_AlbumPhoto::MergeFrom(const AppRequest_AlbumPhoto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_photo()) {
      set_photo(from.photo());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppRequest_AlbumPhoto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppRequest_AlbumPhoto::CopyFrom(const AppRequest_AlbumPhoto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppRequest_AlbumPhoto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AppRequest_AlbumPhoto::Swap(AppRequest_AlbumPhoto* other) {
  if (other != this) {
    std::swap(photo_, other->photo_);
    std::swap(description_, other->description_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppRequest_AlbumPhoto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppRequest_AlbumPhoto_descriptor_;
  metadata.reflection = AppRequest_AlbumPhoto_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int AppRequest_PhotoAlbum::kPhotosFieldNumber;
const int AppRequest_PhotoAlbum::kAlbumDescriptionFieldNumber;
#endif  // !_MSC_VER

AppRequest_PhotoAlbum::AppRequest_PhotoAlbum()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:netmsg.AppRequest.PhotoAlbum)
}

void AppRequest_PhotoAlbum::InitAsDefaultInstance() {
}

AppRequest_PhotoAlbum::AppRequest_PhotoAlbum(const AppRequest_PhotoAlbum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:netmsg.AppRequest.PhotoAlbum)
}

void AppRequest_PhotoAlbum::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  albumdescription_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppRequest_PhotoAlbum::~AppRequest_PhotoAlbum() {
  // @@protoc_insertion_point(destructor:netmsg.AppRequest.PhotoAlbum)
  SharedDtor();
}

void AppRequest_PhotoAlbum::SharedDtor() {
  if (albumdescription_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete albumdescription_;
  }
  if (this != default_instance_) {
  }
}

void AppRequest_PhotoAlbum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppRequest_PhotoAlbum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppRequest_PhotoAlbum_descriptor_;
}

const AppRequest_PhotoAlbum& AppRequest_PhotoAlbum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_social_2eproto();
  return *default_instance_;
}

AppRequest_PhotoAlbum* AppRequest_PhotoAlbum::default_instance_ = NULL;

AppRequest_PhotoAlbum* AppRequest_PhotoAlbum::New() const {
  return new AppRequest_PhotoAlbum;
}

void AppRequest_PhotoAlbum::Clear() {
  if (has_albumdescription()) {
    if (albumdescription_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      albumdescription_->clear();
    }
  }
  photos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppRequest_PhotoAlbum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netmsg.AppRequest.PhotoAlbum)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .netmsg.AppRequest.AlbumPhoto photos = 1;
      case 1: {
        if (tag == 10) {
         parse_photos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_photos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_photos;
        if (input->ExpectTag(18)) goto parse_AlbumDescription;
        break;
      }

      // optional string AlbumDescription = 2;
      case 2: {
        if (tag == 18) {
         parse_AlbumDescription:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_albumdescription()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->albumdescription().data(), this->albumdescription().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "albumdescription");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netmsg.AppRequest.PhotoAlbum)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netmsg.AppRequest.PhotoAlbum)
  return false;
#undef DO_
}

void AppRequest_PhotoAlbum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netmsg.AppRequest.PhotoAlbum)
  // repeated .netmsg.AppRequest.AlbumPhoto photos = 1;
  for (int i = 0; i < this->photos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->photos(i), output);
  }

  // optional string AlbumDescription = 2;
  if (has_albumdescription()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->albumdescription().data(), this->albumdescription().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "albumdescription");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->albumdescription(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:netmsg.AppRequest.PhotoAlbum)
}

::google::protobuf::uint8* AppRequest_PhotoAlbum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:netmsg.AppRequest.PhotoAlbum)
  // repeated .netmsg.AppRequest.AlbumPhoto photos = 1;
  for (int i = 0; i < this->photos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->photos(i), target);
  }

  // optional string AlbumDescription = 2;
  if (has_albumdescription()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->albumdescription().data(), this->albumdescription().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "albumdescription");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->albumdescription(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netmsg.AppRequest.PhotoAlbum)
  return target;
}

int AppRequest_PhotoAlbum::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string AlbumDescription = 2;
    if (has_albumdescription()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->albumdescription());
    }

  }
  // repeated .netmsg.AppRequest.AlbumPhoto photos = 1;
  total_size += 1 * this->photos_size();
  for (int i = 0; i < this->photos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->photos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppRequest_PhotoAlbum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppRequest_PhotoAlbum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppRequest_PhotoAlbum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppRequest_PhotoAlbum::MergeFrom(const AppRequest_PhotoAlbum& from) {
  GOOGLE_CHECK_NE(&from, this);
  photos_.MergeFrom(from.photos_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_albumdescription()) {
      set_albumdescription(from.albumdescription());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppRequest_PhotoAlbum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppRequest_PhotoAlbum::CopyFrom(const AppRequest_PhotoAlbum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppRequest_PhotoAlbum::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->photos())) return false;
  return true;
}

void AppRequest_PhotoAlbum::Swap(AppRequest_PhotoAlbum* other) {
  if (other != this) {
    photos_.Swap(&other->photos_);
    std::swap(albumdescription_, other->albumdescription_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppRequest_PhotoAlbum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppRequest_PhotoAlbum_descriptor_;
  metadata.reflection = AppRequest_PhotoAlbum_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int AppRequest_UpdateProfile::kEmailFieldNumber;
const int AppRequest_UpdateProfile::kDescriptionFieldNumber;
const int AppRequest_UpdateProfile::kLocationFieldNumber;
const int AppRequest_UpdateProfile::kNicknameFieldNumber;
const int AppRequest_UpdateProfile::kPasswordFieldNumber;
const int AppRequest_UpdateProfile::kProfilePhotoFieldNumber;
const int AppRequest_UpdateProfile::kNewAlbumsFieldNumber;
#endif  // !_MSC_VER

AppRequest_UpdateProfile::AppRequest_UpdateProfile()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:netmsg.AppRequest.UpdateProfile)
}

void AppRequest_UpdateProfile::InitAsDefaultInstance() {
}

AppRequest_UpdateProfile::AppRequest_UpdateProfile(const AppRequest_UpdateProfile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:netmsg.AppRequest.UpdateProfile)
}

void AppRequest_UpdateProfile::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  profile_photo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppRequest_UpdateProfile::~AppRequest_UpdateProfile() {
  // @@protoc_insertion_point(destructor:netmsg.AppRequest.UpdateProfile)
  SharedDtor();
}

void AppRequest_UpdateProfile::SharedDtor() {
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete email_;
  }
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (location_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete location_;
  }
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (profile_photo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete profile_photo_;
  }
  if (this != default_instance_) {
  }
}

void AppRequest_UpdateProfile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppRequest_UpdateProfile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppRequest_UpdateProfile_descriptor_;
}

const AppRequest_UpdateProfile& AppRequest_UpdateProfile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_social_2eproto();
  return *default_instance_;
}

AppRequest_UpdateProfile* AppRequest_UpdateProfile::default_instance_ = NULL;

AppRequest_UpdateProfile* AppRequest_UpdateProfile::New() const {
  return new AppRequest_UpdateProfile;
}

void AppRequest_UpdateProfile::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        email_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        description_->clear();
      }
    }
    if (has_location()) {
      if (location_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        location_->clear();
      }
    }
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        password_->clear();
      }
    }
    if (has_profile_photo()) {
      if (profile_photo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        profile_photo_->clear();
      }
    }
  }
  new_albums_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppRequest_UpdateProfile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netmsg.AppRequest.UpdateProfile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string email = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "email");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_description;
        break;
      }

      // optional string description = 2;
      case 2: {
        if (tag == 18) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_location;
        break;
      }

      // optional string location = 3;
      case 3: {
        if (tag == 26) {
         parse_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->location().data(), this->location().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "location");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_nickname;
        break;
      }

      // optional string nickname = 4;
      case 4: {
        if (tag == 34) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_password;
        break;
      }

      // optional string password = 5;
      case 5: {
        if (tag == 42) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_profile_photo;
        break;
      }

      // optional bytes profile_photo = 6;
      case 6: {
        if (tag == 50) {
         parse_profile_photo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_profile_photo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_new_albums;
        break;
      }

      // repeated .netmsg.AppRequest.PhotoAlbum new_albums = 7;
      case 7: {
        if (tag == 58) {
         parse_new_albums:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_new_albums()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_new_albums;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netmsg.AppRequest.UpdateProfile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netmsg.AppRequest.UpdateProfile)
  return false;
#undef DO_
}

void AppRequest_UpdateProfile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netmsg.AppRequest.UpdateProfile)
  // optional string email = 1;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "email");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->email(), output);
  }

  // optional string description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->description(), output);
  }

  // optional string location = 3;
  if (has_location()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "location");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->location(), output);
  }

  // optional string nickname = 4;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->nickname(), output);
  }

  // optional string password = 5;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->password(), output);
  }

  // optional bytes profile_photo = 6;
  if (has_profile_photo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->profile_photo(), output);
  }

  // repeated .netmsg.AppRequest.PhotoAlbum new_albums = 7;
  for (int i = 0; i < this->new_albums_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->new_albums(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:netmsg.AppRequest.UpdateProfile)
}

::google::protobuf::uint8* AppRequest_UpdateProfile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:netmsg.AppRequest.UpdateProfile)
  // optional string email = 1;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "email");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->email(), target);
  }

  // optional string description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  // optional string location = 3;
  if (has_location()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "location");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->location(), target);
  }

  // optional string nickname = 4;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->nickname(), target);
  }

  // optional string password = 5;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->password(), target);
  }

  // optional bytes profile_photo = 6;
  if (has_profile_photo()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->profile_photo(), target);
  }

  // repeated .netmsg.AppRequest.PhotoAlbum new_albums = 7;
  for (int i = 0; i < this->new_albums_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->new_albums(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netmsg.AppRequest.UpdateProfile)
  return target;
}

int AppRequest_UpdateProfile::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string email = 1;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

    // optional string description = 2;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional string location = 3;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->location());
    }

    // optional string nickname = 4;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional string password = 5;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional bytes profile_photo = 6;
    if (has_profile_photo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->profile_photo());
    }

  }
  // repeated .netmsg.AppRequest.PhotoAlbum new_albums = 7;
  total_size += 1 * this->new_albums_size();
  for (int i = 0; i < this->new_albums_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->new_albums(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppRequest_UpdateProfile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppRequest_UpdateProfile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppRequest_UpdateProfile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppRequest_UpdateProfile::MergeFrom(const AppRequest_UpdateProfile& from) {
  GOOGLE_CHECK_NE(&from, this);
  new_albums_.MergeFrom(from.new_albums_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_email()) {
      set_email(from.email());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_location()) {
      set_location(from.location());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_profile_photo()) {
      set_profile_photo(from.profile_photo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppRequest_UpdateProfile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppRequest_UpdateProfile::CopyFrom(const AppRequest_UpdateProfile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppRequest_UpdateProfile::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->new_albums())) return false;
  return true;
}

void AppRequest_UpdateProfile::Swap(AppRequest_UpdateProfile* other) {
  if (other != this) {
    std::swap(email_, other->email_);
    std::swap(description_, other->description_);
    std::swap(location_, other->location_);
    std::swap(nickname_, other->nickname_);
    std::swap(password_, other->password_);
    std::swap(profile_photo_, other->profile_photo_);
    new_albums_.Swap(&other->new_albums_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppRequest_UpdateProfile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppRequest_UpdateProfile_descriptor_;
  metadata.reflection = AppRequest_UpdateProfile_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int AppRequest::kPhoneIdFieldNumber;
const int AppRequest::kMsgTypeFieldNumber;
const int AppRequest::kRegMsgFieldNumber;
const int AppRequest::kLoginMsgFieldNumber;
const int AppRequest::kCreateEventFieldNumber;
const int AppRequest::kAcceptEventFieldNumber;
const int AppRequest::kRejectEventFieldNumber;
const int AppRequest::kInviteEventFieldNumber;
const int AppRequest::kPollInvitedFieldNumber;
const int AppRequest::kPollAcceptedFieldNumber;
const int AppRequest::kFriendRequestFieldNumber;
const int AppRequest::kAcceptFriendRequestFieldNumber;
const int AppRequest::kUpdateProfileFieldNumber;
const int AppRequest::kRequestUserInfoFieldNumber;
#endif  // !_MSC_VER

AppRequest::AppRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:netmsg.AppRequest)
}

void AppRequest::InitAsDefaultInstance() {
  reg_msg_ = const_cast< ::netmsg::AppRequest_RegisterMessage*>(&::netmsg::AppRequest_RegisterMessage::default_instance());
  login_msg_ = const_cast< ::netmsg::AppRequest_LoginMessage*>(&::netmsg::AppRequest_LoginMessage::default_instance());
  create_event_ = const_cast< ::netmsg::AppRequest_CreateEvent*>(&::netmsg::AppRequest_CreateEvent::default_instance());
  accept_event_ = const_cast< ::netmsg::AppRequest_EventAccept*>(&::netmsg::AppRequest_EventAccept::default_instance());
  reject_event_ = const_cast< ::netmsg::AppRequest_EventReject*>(&::netmsg::AppRequest_EventReject::default_instance());
  invite_event_ = const_cast< ::netmsg::AppRequest_EventInvite*>(&::netmsg::AppRequest_EventInvite::default_instance());
  poll_invited_ = const_cast< ::netmsg::AppRequest_PollInvitedEvents*>(&::netmsg::AppRequest_PollInvitedEvents::default_instance());
  poll_accepted_ = const_cast< ::netmsg::AppRequest_PollAcceptedEvents*>(&::netmsg::AppRequest_PollAcceptedEvents::default_instance());
  friend_request_ = const_cast< ::netmsg::AppRequest_FriendRequest*>(&::netmsg::AppRequest_FriendRequest::default_instance());
  accept_friend_request_ = const_cast< ::netmsg::AppRequest_AcceptFriendRequest*>(&::netmsg::AppRequest_AcceptFriendRequest::default_instance());
  update_profile_ = const_cast< ::netmsg::AppRequest_UpdateProfile*>(&::netmsg::AppRequest_UpdateProfile::default_instance());
}

AppRequest::AppRequest(const AppRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:netmsg.AppRequest)
}

void AppRequest::SharedCtor() {
  _cached_size_ = 0;
  phone_id_ = GOOGLE_LONGLONG(0);
  msg_type_ = 1;
  reg_msg_ = NULL;
  login_msg_ = NULL;
  create_event_ = NULL;
  accept_event_ = NULL;
  reject_event_ = NULL;
  invite_event_ = NULL;
  poll_invited_ = NULL;
  poll_accepted_ = NULL;
  friend_request_ = NULL;
  accept_friend_request_ = NULL;
  update_profile_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppRequest::~AppRequest() {
  // @@protoc_insertion_point(destructor:netmsg.AppRequest)
  SharedDtor();
}

void AppRequest::SharedDtor() {
  if (this != default_instance_) {
    delete reg_msg_;
    delete login_msg_;
    delete create_event_;
    delete accept_event_;
    delete reject_event_;
    delete invite_event_;
    delete poll_invited_;
    delete poll_accepted_;
    delete friend_request_;
    delete accept_friend_request_;
    delete update_profile_;
  }
}

void AppRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppRequest_descriptor_;
}

const AppRequest& AppRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_social_2eproto();
  return *default_instance_;
}

AppRequest* AppRequest::default_instance_ = NULL;

AppRequest* AppRequest::New() const {
  return new AppRequest;
}

void AppRequest::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    phone_id_ = GOOGLE_LONGLONG(0);
    msg_type_ = 1;
    if (has_reg_msg()) {
      if (reg_msg_ != NULL) reg_msg_->::netmsg::AppRequest_RegisterMessage::Clear();
    }
    if (has_login_msg()) {
      if (login_msg_ != NULL) login_msg_->::netmsg::AppRequest_LoginMessage::Clear();
    }
    if (has_create_event()) {
      if (create_event_ != NULL) create_event_->::netmsg::AppRequest_CreateEvent::Clear();
    }
    if (has_accept_event()) {
      if (accept_event_ != NULL) accept_event_->::netmsg::AppRequest_EventAccept::Clear();
    }
    if (has_reject_event()) {
      if (reject_event_ != NULL) reject_event_->::netmsg::AppRequest_EventReject::Clear();
    }
    if (has_invite_event()) {
      if (invite_event_ != NULL) invite_event_->::netmsg::AppRequest_EventInvite::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 7936) {
    if (has_poll_invited()) {
      if (poll_invited_ != NULL) poll_invited_->::netmsg::AppRequest_PollInvitedEvents::Clear();
    }
    if (has_poll_accepted()) {
      if (poll_accepted_ != NULL) poll_accepted_->::netmsg::AppRequest_PollAcceptedEvents::Clear();
    }
    if (has_friend_request()) {
      if (friend_request_ != NULL) friend_request_->::netmsg::AppRequest_FriendRequest::Clear();
    }
    if (has_accept_friend_request()) {
      if (accept_friend_request_ != NULL) accept_friend_request_->::netmsg::AppRequest_AcceptFriendRequest::Clear();
    }
    if (has_update_profile()) {
      if (update_profile_ != NULL) update_profile_->::netmsg::AppRequest_UpdateProfile::Clear();
    }
  }
  request_user_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netmsg.AppRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 phone_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &phone_id_)));
          set_has_phone_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_msg_type;
        break;
      }

      // required .netmsg.AppRequest.MessageType msg_type = 2;
      case 2: {
        if (tag == 16) {
         parse_msg_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::netmsg::AppRequest_MessageType_IsValid(value)) {
            set_msg_type(static_cast< ::netmsg::AppRequest_MessageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_reg_msg;
        break;
      }

      // optional .netmsg.AppRequest.RegisterMessage reg_msg = 3;
      case 3: {
        if (tag == 26) {
         parse_reg_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reg_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_login_msg;
        break;
      }

      // optional .netmsg.AppRequest.LoginMessage login_msg = 4;
      case 4: {
        if (tag == 34) {
         parse_login_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_login_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_create_event;
        break;
      }

      // optional .netmsg.AppRequest.CreateEvent create_event = 5;
      case 5: {
        if (tag == 42) {
         parse_create_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_create_event()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_accept_event;
        break;
      }

      // optional .netmsg.AppRequest.EventAccept accept_event = 6;
      case 6: {
        if (tag == 50) {
         parse_accept_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_accept_event()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_reject_event;
        break;
      }

      // optional .netmsg.AppRequest.EventReject reject_event = 7;
      case 7: {
        if (tag == 58) {
         parse_reject_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reject_event()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_invite_event;
        break;
      }

      // optional .netmsg.AppRequest.EventInvite invite_event = 8;
      case 8: {
        if (tag == 66) {
         parse_invite_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_invite_event()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_poll_invited;
        break;
      }

      // optional .netmsg.AppRequest.PollInvitedEvents poll_invited = 9;
      case 9: {
        if (tag == 74) {
         parse_poll_invited:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_poll_invited()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_poll_accepted;
        break;
      }

      // optional .netmsg.AppRequest.PollAcceptedEvents poll_accepted = 10;
      case 10: {
        if (tag == 82) {
         parse_poll_accepted:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_poll_accepted()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_friend_request;
        break;
      }

      // optional .netmsg.AppRequest.FriendRequest friend_request = 11;
      case 11: {
        if (tag == 90) {
         parse_friend_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friend_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_accept_friend_request;
        break;
      }

      // optional .netmsg.AppRequest.AcceptFriendRequest accept_friend_request = 12;
      case 12: {
        if (tag == 98) {
         parse_accept_friend_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_accept_friend_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_update_profile;
        break;
      }

      // optional .netmsg.AppRequest.UpdateProfile update_profile = 13;
      case 13: {
        if (tag == 106) {
         parse_update_profile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_profile()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_request_user_info;
        break;
      }

      // repeated int64 request_user_info = 14;
      case 14: {
        if (tag == 112) {
         parse_request_user_info:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 112, input, this->mutable_request_user_info())));
        } else if (tag == 114) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_request_user_info())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_request_user_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netmsg.AppRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netmsg.AppRequest)
  return false;
#undef DO_
}

void AppRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netmsg.AppRequest)
  // required int64 phone_id = 1;
  if (has_phone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->phone_id(), output);
  }

  // required .netmsg.AppRequest.MessageType msg_type = 2;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->msg_type(), output);
  }

  // optional .netmsg.AppRequest.RegisterMessage reg_msg = 3;
  if (has_reg_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->reg_msg(), output);
  }

  // optional .netmsg.AppRequest.LoginMessage login_msg = 4;
  if (has_login_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->login_msg(), output);
  }

  // optional .netmsg.AppRequest.CreateEvent create_event = 5;
  if (has_create_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->create_event(), output);
  }

  // optional .netmsg.AppRequest.EventAccept accept_event = 6;
  if (has_accept_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->accept_event(), output);
  }

  // optional .netmsg.AppRequest.EventReject reject_event = 7;
  if (has_reject_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->reject_event(), output);
  }

  // optional .netmsg.AppRequest.EventInvite invite_event = 8;
  if (has_invite_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->invite_event(), output);
  }

  // optional .netmsg.AppRequest.PollInvitedEvents poll_invited = 9;
  if (has_poll_invited()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->poll_invited(), output);
  }

  // optional .netmsg.AppRequest.PollAcceptedEvents poll_accepted = 10;
  if (has_poll_accepted()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->poll_accepted(), output);
  }

  // optional .netmsg.AppRequest.FriendRequest friend_request = 11;
  if (has_friend_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->friend_request(), output);
  }

  // optional .netmsg.AppRequest.AcceptFriendRequest accept_friend_request = 12;
  if (has_accept_friend_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->accept_friend_request(), output);
  }

  // optional .netmsg.AppRequest.UpdateProfile update_profile = 13;
  if (has_update_profile()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->update_profile(), output);
  }

  // repeated int64 request_user_info = 14;
  for (int i = 0; i < this->request_user_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      14, this->request_user_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:netmsg.AppRequest)
}

::google::protobuf::uint8* AppRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:netmsg.AppRequest)
  // required int64 phone_id = 1;
  if (has_phone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->phone_id(), target);
  }

  // required .netmsg.AppRequest.MessageType msg_type = 2;
  if (has_msg_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->msg_type(), target);
  }

  // optional .netmsg.AppRequest.RegisterMessage reg_msg = 3;
  if (has_reg_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->reg_msg(), target);
  }

  // optional .netmsg.AppRequest.LoginMessage login_msg = 4;
  if (has_login_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->login_msg(), target);
  }

  // optional .netmsg.AppRequest.CreateEvent create_event = 5;
  if (has_create_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->create_event(), target);
  }

  // optional .netmsg.AppRequest.EventAccept accept_event = 6;
  if (has_accept_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->accept_event(), target);
  }

  // optional .netmsg.AppRequest.EventReject reject_event = 7;
  if (has_reject_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->reject_event(), target);
  }

  // optional .netmsg.AppRequest.EventInvite invite_event = 8;
  if (has_invite_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->invite_event(), target);
  }

  // optional .netmsg.AppRequest.PollInvitedEvents poll_invited = 9;
  if (has_poll_invited()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->poll_invited(), target);
  }

  // optional .netmsg.AppRequest.PollAcceptedEvents poll_accepted = 10;
  if (has_poll_accepted()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->poll_accepted(), target);
  }

  // optional .netmsg.AppRequest.FriendRequest friend_request = 11;
  if (has_friend_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->friend_request(), target);
  }

  // optional .netmsg.AppRequest.AcceptFriendRequest accept_friend_request = 12;
  if (has_accept_friend_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->accept_friend_request(), target);
  }

  // optional .netmsg.AppRequest.UpdateProfile update_profile = 13;
  if (has_update_profile()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->update_profile(), target);
  }

  // repeated int64 request_user_info = 14;
  for (int i = 0; i < this->request_user_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(14, this->request_user_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netmsg.AppRequest)
  return target;
}

int AppRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 phone_id = 1;
    if (has_phone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->phone_id());
    }

    // required .netmsg.AppRequest.MessageType msg_type = 2;
    if (has_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_type());
    }

    // optional .netmsg.AppRequest.RegisterMessage reg_msg = 3;
    if (has_reg_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reg_msg());
    }

    // optional .netmsg.AppRequest.LoginMessage login_msg = 4;
    if (has_login_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->login_msg());
    }

    // optional .netmsg.AppRequest.CreateEvent create_event = 5;
    if (has_create_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->create_event());
    }

    // optional .netmsg.AppRequest.EventAccept accept_event = 6;
    if (has_accept_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->accept_event());
    }

    // optional .netmsg.AppRequest.EventReject reject_event = 7;
    if (has_reject_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reject_event());
    }

    // optional .netmsg.AppRequest.EventInvite invite_event = 8;
    if (has_invite_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->invite_event());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .netmsg.AppRequest.PollInvitedEvents poll_invited = 9;
    if (has_poll_invited()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->poll_invited());
    }

    // optional .netmsg.AppRequest.PollAcceptedEvents poll_accepted = 10;
    if (has_poll_accepted()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->poll_accepted());
    }

    // optional .netmsg.AppRequest.FriendRequest friend_request = 11;
    if (has_friend_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friend_request());
    }

    // optional .netmsg.AppRequest.AcceptFriendRequest accept_friend_request = 12;
    if (has_accept_friend_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->accept_friend_request());
    }

    // optional .netmsg.AppRequest.UpdateProfile update_profile = 13;
    if (has_update_profile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->update_profile());
    }

  }
  // repeated int64 request_user_info = 14;
  {
    int data_size = 0;
    for (int i = 0; i < this->request_user_info_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->request_user_info(i));
    }
    total_size += 1 * this->request_user_info_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppRequest::MergeFrom(const AppRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  request_user_info_.MergeFrom(from.request_user_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phone_id()) {
      set_phone_id(from.phone_id());
    }
    if (from.has_msg_type()) {
      set_msg_type(from.msg_type());
    }
    if (from.has_reg_msg()) {
      mutable_reg_msg()->::netmsg::AppRequest_RegisterMessage::MergeFrom(from.reg_msg());
    }
    if (from.has_login_msg()) {
      mutable_login_msg()->::netmsg::AppRequest_LoginMessage::MergeFrom(from.login_msg());
    }
    if (from.has_create_event()) {
      mutable_create_event()->::netmsg::AppRequest_CreateEvent::MergeFrom(from.create_event());
    }
    if (from.has_accept_event()) {
      mutable_accept_event()->::netmsg::AppRequest_EventAccept::MergeFrom(from.accept_event());
    }
    if (from.has_reject_event()) {
      mutable_reject_event()->::netmsg::AppRequest_EventReject::MergeFrom(from.reject_event());
    }
    if (from.has_invite_event()) {
      mutable_invite_event()->::netmsg::AppRequest_EventInvite::MergeFrom(from.invite_event());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_poll_invited()) {
      mutable_poll_invited()->::netmsg::AppRequest_PollInvitedEvents::MergeFrom(from.poll_invited());
    }
    if (from.has_poll_accepted()) {
      mutable_poll_accepted()->::netmsg::AppRequest_PollAcceptedEvents::MergeFrom(from.poll_accepted());
    }
    if (from.has_friend_request()) {
      mutable_friend_request()->::netmsg::AppRequest_FriendRequest::MergeFrom(from.friend_request());
    }
    if (from.has_accept_friend_request()) {
      mutable_accept_friend_request()->::netmsg::AppRequest_AcceptFriendRequest::MergeFrom(from.accept_friend_request());
    }
    if (from.has_update_profile()) {
      mutable_update_profile()->::netmsg::AppRequest_UpdateProfile::MergeFrom(from.update_profile());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppRequest::CopyFrom(const AppRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_reg_msg()) {
    if (!this->reg_msg().IsInitialized()) return false;
  }
  if (has_login_msg()) {
    if (!this->login_msg().IsInitialized()) return false;
  }
  if (has_create_event()) {
    if (!this->create_event().IsInitialized()) return false;
  }
  if (has_accept_event()) {
    if (!this->accept_event().IsInitialized()) return false;
  }
  if (has_reject_event()) {
    if (!this->reject_event().IsInitialized()) return false;
  }
  if (has_invite_event()) {
    if (!this->invite_event().IsInitialized()) return false;
  }
  if (has_friend_request()) {
    if (!this->friend_request().IsInitialized()) return false;
  }
  if (has_accept_friend_request()) {
    if (!this->accept_friend_request().IsInitialized()) return false;
  }
  if (has_update_profile()) {
    if (!this->update_profile().IsInitialized()) return false;
  }
  return true;
}

void AppRequest::Swap(AppRequest* other) {
  if (other != this) {
    std::swap(phone_id_, other->phone_id_);
    std::swap(msg_type_, other->msg_type_);
    std::swap(reg_msg_, other->reg_msg_);
    std::swap(login_msg_, other->login_msg_);
    std::swap(create_event_, other->create_event_);
    std::swap(accept_event_, other->accept_event_);
    std::swap(reject_event_, other->reject_event_);
    std::swap(invite_event_, other->invite_event_);
    std::swap(poll_invited_, other->poll_invited_);
    std::swap(poll_accepted_, other->poll_accepted_);
    std::swap(friend_request_, other->friend_request_);
    std::swap(accept_friend_request_, other->accept_friend_request_);
    std::swap(update_profile_, other->update_profile_);
    request_user_info_.Swap(&other->request_user_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppRequest_descriptor_;
  metadata.reflection = AppRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* AppReply_ResponseType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppReply_ResponseType_descriptor_;
}
bool AppReply_ResponseType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const AppReply_ResponseType AppReply::tSuccess;
const AppReply_ResponseType AppReply::tMissingInput;
const AppReply_ResponseType AppReply::ResponseType_MIN;
const AppReply_ResponseType AppReply::ResponseType_MAX;
const int AppReply::ResponseType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int AppReply_EventUUID::kEventUuid1FieldNumber;
#endif  // !_MSC_VER

AppReply_EventUUID::AppReply_EventUUID()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:netmsg.AppReply.EventUUID)
}

void AppReply_EventUUID::InitAsDefaultInstance() {
}

AppReply_EventUUID::AppReply_EventUUID(const AppReply_EventUUID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:netmsg.AppReply.EventUUID)
}

void AppReply_EventUUID::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  event_uuid1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppReply_EventUUID::~AppReply_EventUUID() {
  // @@protoc_insertion_point(destructor:netmsg.AppReply.EventUUID)
  SharedDtor();
}

void AppReply_EventUUID::SharedDtor() {
  if (event_uuid1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete event_uuid1_;
  }
  if (this != default_instance_) {
  }
}

void AppReply_EventUUID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppReply_EventUUID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppReply_EventUUID_descriptor_;
}

const AppReply_EventUUID& AppReply_EventUUID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_social_2eproto();
  return *default_instance_;
}

AppReply_EventUUID* AppReply_EventUUID::default_instance_ = NULL;

AppReply_EventUUID* AppReply_EventUUID::New() const {
  return new AppReply_EventUUID;
}

void AppReply_EventUUID::Clear() {
  if (has_event_uuid1()) {
    if (event_uuid1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      event_uuid1_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppReply_EventUUID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netmsg.AppReply.EventUUID)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes event_uuid1 = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_event_uuid1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netmsg.AppReply.EventUUID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netmsg.AppReply.EventUUID)
  return false;
#undef DO_
}

void AppReply_EventUUID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netmsg.AppReply.EventUUID)
  // required bytes event_uuid1 = 1;
  if (has_event_uuid1()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->event_uuid1(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:netmsg.AppReply.EventUUID)
}

::google::protobuf::uint8* AppReply_EventUUID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:netmsg.AppReply.EventUUID)
  // required bytes event_uuid1 = 1;
  if (has_event_uuid1()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->event_uuid1(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netmsg.AppReply.EventUUID)
  return target;
}

int AppReply_EventUUID::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes event_uuid1 = 1;
    if (has_event_uuid1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->event_uuid1());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppReply_EventUUID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppReply_EventUUID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppReply_EventUUID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppReply_EventUUID::MergeFrom(const AppReply_EventUUID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_uuid1()) {
      set_event_uuid1(from.event_uuid1());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppReply_EventUUID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppReply_EventUUID::CopyFrom(const AppReply_EventUUID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppReply_EventUUID::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AppReply_EventUUID::Swap(AppReply_EventUUID* other) {
  if (other != this) {
    std::swap(event_uuid1_, other->event_uuid1_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppReply_EventUUID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppReply_EventUUID_descriptor_;
  metadata.reflection = AppReply_EventUUID_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int AppReply_User::kPhoneNumberFieldNumber;
const int AppReply_User::kNicknameFieldNumber;
const int AppReply_User::kIsMaleFieldNumber;
const int AppReply_User::kProfilePhotoFieldNumber;
const int AppReply_User::kEmailFieldNumber;
const int AppReply_User::kDescriptionFieldNumber;
const int AppReply_User::kLocationFieldNumber;
#endif  // !_MSC_VER

AppReply_User::AppReply_User()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:netmsg.AppReply.User)
}

void AppReply_User::InitAsDefaultInstance() {
}

AppReply_User::AppReply_User(const AppReply_User& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:netmsg.AppReply.User)
}

void AppReply_User::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  phone_number_ = GOOGLE_LONGLONG(0);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_male_ = false;
  profile_photo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppReply_User::~AppReply_User() {
  // @@protoc_insertion_point(destructor:netmsg.AppReply.User)
  SharedDtor();
}

void AppReply_User::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (profile_photo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete profile_photo_;
  }
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete email_;
  }
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (location_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete location_;
  }
  if (this != default_instance_) {
  }
}

void AppReply_User::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppReply_User::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppReply_User_descriptor_;
}

const AppReply_User& AppReply_User::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_social_2eproto();
  return *default_instance_;
}

AppReply_User* AppReply_User::default_instance_ = NULL;

AppReply_User* AppReply_User::New() const {
  return new AppReply_User;
}

void AppReply_User::Clear() {
  if (_has_bits_[0 / 32] & 127) {
    phone_number_ = GOOGLE_LONGLONG(0);
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
    is_male_ = false;
    if (has_profile_photo()) {
      if (profile_photo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        profile_photo_->clear();
      }
    }
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        email_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        description_->clear();
      }
    }
    if (has_location()) {
      if (location_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        location_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppReply_User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netmsg.AppReply.User)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 phone_number = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &phone_number_)));
          set_has_phone_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nickname;
        break;
      }

      // required string nickname = 2;
      case 2: {
        if (tag == 18) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_is_male;
        break;
      }

      // required bool is_male = 3;
      case 3: {
        if (tag == 24) {
         parse_is_male:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_male_)));
          set_has_is_male();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_profile_photo;
        break;
      }

      // optional bytes profile_photo = 4;
      case 4: {
        if (tag == 34) {
         parse_profile_photo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_profile_photo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_email;
        break;
      }

      // optional string email = 5;
      case 5: {
        if (tag == 42) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "email");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_description;
        break;
      }

      // optional string description = 6;
      case 6: {
        if (tag == 50) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_location;
        break;
      }

      // optional string location = 7;
      case 7: {
        if (tag == 58) {
         parse_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->location().data(), this->location().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "location");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netmsg.AppReply.User)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netmsg.AppReply.User)
  return false;
#undef DO_
}

void AppReply_User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netmsg.AppReply.User)
  // required int64 phone_number = 1;
  if (has_phone_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->phone_number(), output);
  }

  // required string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nickname(), output);
  }

  // required bool is_male = 3;
  if (has_is_male()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_male(), output);
  }

  // optional bytes profile_photo = 4;
  if (has_profile_photo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->profile_photo(), output);
  }

  // optional string email = 5;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "email");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->email(), output);
  }

  // optional string description = 6;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->description(), output);
  }

  // optional string location = 7;
  if (has_location()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "location");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->location(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:netmsg.AppReply.User)
}

::google::protobuf::uint8* AppReply_User::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:netmsg.AppReply.User)
  // required int64 phone_number = 1;
  if (has_phone_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->phone_number(), target);
  }

  // required string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // required bool is_male = 3;
  if (has_is_male()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_male(), target);
  }

  // optional bytes profile_photo = 4;
  if (has_profile_photo()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->profile_photo(), target);
  }

  // optional string email = 5;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "email");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->email(), target);
  }

  // optional string description = 6;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->description(), target);
  }

  // optional string location = 7;
  if (has_location()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "location");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->location(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netmsg.AppReply.User)
  return target;
}

int AppReply_User::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 phone_number = 1;
    if (has_phone_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->phone_number());
    }

    // required string nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // required bool is_male = 3;
    if (has_is_male()) {
      total_size += 1 + 1;
    }

    // optional bytes profile_photo = 4;
    if (has_profile_photo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->profile_photo());
    }

    // optional string email = 5;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

    // optional string description = 6;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional string location = 7;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->location());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppReply_User::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppReply_User* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppReply_User*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppReply_User::MergeFrom(const AppReply_User& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phone_number()) {
      set_phone_number(from.phone_number());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_is_male()) {
      set_is_male(from.is_male());
    }
    if (from.has_profile_photo()) {
      set_profile_photo(from.profile_photo());
    }
    if (from.has_email()) {
      set_email(from.email());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_location()) {
      set_location(from.location());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppReply_User::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppReply_User::CopyFrom(const AppReply_User& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppReply_User::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void AppReply_User::Swap(AppReply_User* other) {
  if (other != this) {
    std::swap(phone_number_, other->phone_number_);
    std::swap(nickname_, other->nickname_);
    std::swap(is_male_, other->is_male_);
    std::swap(profile_photo_, other->profile_photo_);
    std::swap(email_, other->email_);
    std::swap(description_, other->description_);
    std::swap(location_, other->location_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppReply_User::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppReply_User_descriptor_;
  metadata.reflection = AppReply_User_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int AppReply_FriendRequest::kRequestOriginUserIdFieldNumber;
const int AppReply_FriendRequest::kRequestMessageFieldNumber;
#endif  // !_MSC_VER

AppReply_FriendRequest::AppReply_FriendRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:netmsg.AppReply.FriendRequest)
}

void AppReply_FriendRequest::InitAsDefaultInstance() {
}

AppReply_FriendRequest::AppReply_FriendRequest(const AppReply_FriendRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:netmsg.AppReply.FriendRequest)
}

void AppReply_FriendRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  request_origin_user_id_ = GOOGLE_LONGLONG(0);
  request_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppReply_FriendRequest::~AppReply_FriendRequest() {
  // @@protoc_insertion_point(destructor:netmsg.AppReply.FriendRequest)
  SharedDtor();
}

void AppReply_FriendRequest::SharedDtor() {
  if (request_message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete request_message_;
  }
  if (this != default_instance_) {
  }
}

void AppReply_FriendRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppReply_FriendRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppReply_FriendRequest_descriptor_;
}

const AppReply_FriendRequest& AppReply_FriendRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_social_2eproto();
  return *default_instance_;
}

AppReply_FriendRequest* AppReply_FriendRequest::default_instance_ = NULL;

AppReply_FriendRequest* AppReply_FriendRequest::New() const {
  return new AppReply_FriendRequest;
}

void AppReply_FriendRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    request_origin_user_id_ = GOOGLE_LONGLONG(0);
    if (has_request_message()) {
      if (request_message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        request_message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppReply_FriendRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netmsg.AppReply.FriendRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 request_origin_user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &request_origin_user_id_)));
          set_has_request_origin_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_request_message;
        break;
      }

      // required string request_message = 2;
      case 2: {
        if (tag == 18) {
         parse_request_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_message().data(), this->request_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "request_message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netmsg.AppReply.FriendRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netmsg.AppReply.FriendRequest)
  return false;
#undef DO_
}

void AppReply_FriendRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netmsg.AppReply.FriendRequest)
  // required int64 request_origin_user_id = 1;
  if (has_request_origin_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->request_origin_user_id(), output);
  }

  // required string request_message = 2;
  if (has_request_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_message().data(), this->request_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "request_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->request_message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:netmsg.AppReply.FriendRequest)
}

::google::protobuf::uint8* AppReply_FriendRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:netmsg.AppReply.FriendRequest)
  // required int64 request_origin_user_id = 1;
  if (has_request_origin_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->request_origin_user_id(), target);
  }

  // required string request_message = 2;
  if (has_request_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_message().data(), this->request_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "request_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->request_message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netmsg.AppReply.FriendRequest)
  return target;
}

int AppReply_FriendRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 request_origin_user_id = 1;
    if (has_request_origin_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->request_origin_user_id());
    }

    // required string request_message = 2;
    if (has_request_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppReply_FriendRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppReply_FriendRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppReply_FriendRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppReply_FriendRequest::MergeFrom(const AppReply_FriendRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_origin_user_id()) {
      set_request_origin_user_id(from.request_origin_user_id());
    }
    if (from.has_request_message()) {
      set_request_message(from.request_message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppReply_FriendRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppReply_FriendRequest::CopyFrom(const AppReply_FriendRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppReply_FriendRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AppReply_FriendRequest::Swap(AppReply_FriendRequest* other) {
  if (other != this) {
    std::swap(request_origin_user_id_, other->request_origin_user_id_);
    std::swap(request_message_, other->request_message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppReply_FriendRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppReply_FriendRequest_descriptor_;
  metadata.reflection = AppReply_FriendRequest_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int AppReply_EventInfo::kTitleFieldNumber;
const int AppReply_EventInfo::kLocationFieldNumber;
const int AppReply_EventInfo::kTimeFieldNumber;
const int AppReply_EventInfo::kEventUuidFieldNumber;
const int AppReply_EventInfo::kIsPublicFieldNumber;
const int AppReply_EventInfo::kDescriptionFieldNumber;
const int AppReply_EventInfo::kAcceptedUsersFieldNumber;
#endif  // !_MSC_VER

AppReply_EventInfo::AppReply_EventInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:netmsg.AppReply.EventInfo)
}

void AppReply_EventInfo::InitAsDefaultInstance() {
}

AppReply_EventInfo::AppReply_EventInfo(const AppReply_EventInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:netmsg.AppReply.EventInfo)
}

void AppReply_EventInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = GOOGLE_LONGLONG(0);
  event_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_public_ = false;
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppReply_EventInfo::~AppReply_EventInfo() {
  // @@protoc_insertion_point(destructor:netmsg.AppReply.EventInfo)
  SharedDtor();
}

void AppReply_EventInfo::SharedDtor() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (location_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete location_;
  }
  if (event_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete event_uuid_;
  }
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (this != default_instance_) {
  }
}

void AppReply_EventInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppReply_EventInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppReply_EventInfo_descriptor_;
}

const AppReply_EventInfo& AppReply_EventInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_social_2eproto();
  return *default_instance_;
}

AppReply_EventInfo* AppReply_EventInfo::default_instance_ = NULL;

AppReply_EventInfo* AppReply_EventInfo::New() const {
  return new AppReply_EventInfo;
}

void AppReply_EventInfo::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        title_->clear();
      }
    }
    if (has_location()) {
      if (location_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        location_->clear();
      }
    }
    time_ = GOOGLE_LONGLONG(0);
    if (has_event_uuid()) {
      if (event_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        event_uuid_->clear();
      }
    }
    is_public_ = false;
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        description_->clear();
      }
    }
  }
  accepted_users_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppReply_EventInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netmsg.AppReply.EventInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string title = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_location;
        break;
      }

      // required string location = 2;
      case 2: {
        if (tag == 18) {
         parse_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->location().data(), this->location().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "location");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // required int64 time = 3;
      case 3: {
        if (tag == 24) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_event_uuid;
        break;
      }

      // required bytes event_uuid = 4;
      case 4: {
        if (tag == 34) {
         parse_event_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_event_uuid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_is_public;
        break;
      }

      // required bool is_public = 5;
      case 5: {
        if (tag == 40) {
         parse_is_public:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_public_)));
          set_has_is_public();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_description;
        break;
      }

      // required string description = 6;
      case 6: {
        if (tag == 50) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_accepted_users;
        break;
      }

      // repeated int64 accepted_users = 7;
      case 7: {
        if (tag == 56) {
         parse_accepted_users:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 56, input, this->mutable_accepted_users())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_accepted_users())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_accepted_users;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netmsg.AppReply.EventInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netmsg.AppReply.EventInfo)
  return false;
#undef DO_
}

void AppReply_EventInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netmsg.AppReply.EventInfo)
  // required string title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->title(), output);
  }

  // required string location = 2;
  if (has_location()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "location");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->location(), output);
  }

  // required int64 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->time(), output);
  }

  // required bytes event_uuid = 4;
  if (has_event_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->event_uuid(), output);
  }

  // required bool is_public = 5;
  if (has_is_public()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_public(), output);
  }

  // required string description = 6;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->description(), output);
  }

  // repeated int64 accepted_users = 7;
  for (int i = 0; i < this->accepted_users_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      7, this->accepted_users(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:netmsg.AppReply.EventInfo)
}

::google::protobuf::uint8* AppReply_EventInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:netmsg.AppReply.EventInfo)
  // required string title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->title(), target);
  }

  // required string location = 2;
  if (has_location()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "location");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->location(), target);
  }

  // required int64 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->time(), target);
  }

  // required bytes event_uuid = 4;
  if (has_event_uuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->event_uuid(), target);
  }

  // required bool is_public = 5;
  if (has_is_public()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_public(), target);
  }

  // required string description = 6;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->description(), target);
  }

  // repeated int64 accepted_users = 7;
  for (int i = 0; i < this->accepted_users_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(7, this->accepted_users(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netmsg.AppReply.EventInfo)
  return target;
}

int AppReply_EventInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string title = 1;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // required string location = 2;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->location());
    }

    // required int64 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // required bytes event_uuid = 4;
    if (has_event_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->event_uuid());
    }

    // required bool is_public = 5;
    if (has_is_public()) {
      total_size += 1 + 1;
    }

    // required string description = 6;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

  }
  // repeated int64 accepted_users = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->accepted_users_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->accepted_users(i));
    }
    total_size += 1 * this->accepted_users_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppReply_EventInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppReply_EventInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppReply_EventInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppReply_EventInfo::MergeFrom(const AppReply_EventInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  accepted_users_.MergeFrom(from.accepted_users_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_location()) {
      set_location(from.location());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_event_uuid()) {
      set_event_uuid(from.event_uuid());
    }
    if (from.has_is_public()) {
      set_is_public(from.is_public());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppReply_EventInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppReply_EventInfo::CopyFrom(const AppReply_EventInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppReply_EventInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void AppReply_EventInfo::Swap(AppReply_EventInfo* other) {
  if (other != this) {
    std::swap(title_, other->title_);
    std::swap(location_, other->location_);
    std::swap(time_, other->time_);
    std::swap(event_uuid_, other->event_uuid_);
    std::swap(is_public_, other->is_public_);
    std::swap(description_, other->description_);
    accepted_users_.Swap(&other->accepted_users_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppReply_EventInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppReply_EventInfo_descriptor_;
  metadata.reflection = AppReply_EventInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int AppReply::kResponseTypeFieldNumber;
const int AppReply::kEventUuidFieldNumber;
const int AppReply::kUsersFieldNumber;
const int AppReply::kFriendRequestsFieldNumber;
const int AppReply::kEventInfoFieldNumber;
const int AppReply::kAcceptedFriendsFieldNumber;
#endif  // !_MSC_VER

AppReply::AppReply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:netmsg.AppReply)
}

void AppReply::InitAsDefaultInstance() {
  event_uuid_ = const_cast< ::netmsg::AppReply_EventUUID*>(&::netmsg::AppReply_EventUUID::default_instance());
}

AppReply::AppReply(const AppReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:netmsg.AppReply)
}

void AppReply::SharedCtor() {
  _cached_size_ = 0;
  response_type_ = 1;
  event_uuid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppReply::~AppReply() {
  // @@protoc_insertion_point(destructor:netmsg.AppReply)
  SharedDtor();
}

void AppReply::SharedDtor() {
  if (this != default_instance_) {
    delete event_uuid_;
  }
}

void AppReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppReply_descriptor_;
}

const AppReply& AppReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_social_2eproto();
  return *default_instance_;
}

AppReply* AppReply::default_instance_ = NULL;

AppReply* AppReply::New() const {
  return new AppReply;
}

void AppReply::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    response_type_ = 1;
    if (has_event_uuid()) {
      if (event_uuid_ != NULL) event_uuid_->::netmsg::AppReply_EventUUID::Clear();
    }
  }
  users_.Clear();
  friend_requests_.Clear();
  event_info_.Clear();
  accepted_friends_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netmsg.AppReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .netmsg.AppReply.ResponseType response_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::netmsg::AppReply_ResponseType_IsValid(value)) {
            set_response_type(static_cast< ::netmsg::AppReply_ResponseType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_event_uuid;
        break;
      }

      // optional .netmsg.AppReply.EventUUID event_uuid = 2;
      case 2: {
        if (tag == 18) {
         parse_event_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_event_uuid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_users;
        break;
      }

      // repeated .netmsg.AppReply.User users = 3;
      case 3: {
        if (tag == 26) {
         parse_users:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_users()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_users;
        if (input->ExpectTag(34)) goto parse_friend_requests;
        break;
      }

      // repeated .netmsg.AppReply.FriendRequest friend_requests = 4;
      case 4: {
        if (tag == 34) {
         parse_friend_requests:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friend_requests()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_friend_requests;
        if (input->ExpectTag(42)) goto parse_event_info;
        break;
      }

      // repeated .netmsg.AppReply.EventInfo event_info = 5;
      case 5: {
        if (tag == 42) {
         parse_event_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_event_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_event_info;
        if (input->ExpectTag(48)) goto parse_accepted_friends;
        break;
      }

      // repeated int64 accepted_friends = 6;
      case 6: {
        if (tag == 48) {
         parse_accepted_friends:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 48, input, this->mutable_accepted_friends())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_accepted_friends())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_accepted_friends;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netmsg.AppReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netmsg.AppReply)
  return false;
#undef DO_
}

void AppReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netmsg.AppReply)
  // required .netmsg.AppReply.ResponseType response_type = 1;
  if (has_response_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->response_type(), output);
  }

  // optional .netmsg.AppReply.EventUUID event_uuid = 2;
  if (has_event_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->event_uuid(), output);
  }

  // repeated .netmsg.AppReply.User users = 3;
  for (int i = 0; i < this->users_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->users(i), output);
  }

  // repeated .netmsg.AppReply.FriendRequest friend_requests = 4;
  for (int i = 0; i < this->friend_requests_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->friend_requests(i), output);
  }

  // repeated .netmsg.AppReply.EventInfo event_info = 5;
  for (int i = 0; i < this->event_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->event_info(i), output);
  }

  // repeated int64 accepted_friends = 6;
  for (int i = 0; i < this->accepted_friends_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      6, this->accepted_friends(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:netmsg.AppReply)
}

::google::protobuf::uint8* AppReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:netmsg.AppReply)
  // required .netmsg.AppReply.ResponseType response_type = 1;
  if (has_response_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->response_type(), target);
  }

  // optional .netmsg.AppReply.EventUUID event_uuid = 2;
  if (has_event_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->event_uuid(), target);
  }

  // repeated .netmsg.AppReply.User users = 3;
  for (int i = 0; i < this->users_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->users(i), target);
  }

  // repeated .netmsg.AppReply.FriendRequest friend_requests = 4;
  for (int i = 0; i < this->friend_requests_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->friend_requests(i), target);
  }

  // repeated .netmsg.AppReply.EventInfo event_info = 5;
  for (int i = 0; i < this->event_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->event_info(i), target);
  }

  // repeated int64 accepted_friends = 6;
  for (int i = 0; i < this->accepted_friends_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(6, this->accepted_friends(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netmsg.AppReply)
  return target;
}

int AppReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .netmsg.AppReply.ResponseType response_type = 1;
    if (has_response_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->response_type());
    }

    // optional .netmsg.AppReply.EventUUID event_uuid = 2;
    if (has_event_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->event_uuid());
    }

  }
  // repeated .netmsg.AppReply.User users = 3;
  total_size += 1 * this->users_size();
  for (int i = 0; i < this->users_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->users(i));
  }

  // repeated .netmsg.AppReply.FriendRequest friend_requests = 4;
  total_size += 1 * this->friend_requests_size();
  for (int i = 0; i < this->friend_requests_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friend_requests(i));
  }

  // repeated .netmsg.AppReply.EventInfo event_info = 5;
  total_size += 1 * this->event_info_size();
  for (int i = 0; i < this->event_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->event_info(i));
  }

  // repeated int64 accepted_friends = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->accepted_friends_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->accepted_friends(i));
    }
    total_size += 1 * this->accepted_friends_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppReply::MergeFrom(const AppReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  users_.MergeFrom(from.users_);
  friend_requests_.MergeFrom(from.friend_requests_);
  event_info_.MergeFrom(from.event_info_);
  accepted_friends_.MergeFrom(from.accepted_friends_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_response_type()) {
      set_response_type(from.response_type());
    }
    if (from.has_event_uuid()) {
      mutable_event_uuid()->::netmsg::AppReply_EventUUID::MergeFrom(from.event_uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppReply::CopyFrom(const AppReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_event_uuid()) {
    if (!this->event_uuid().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->users())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->friend_requests())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->event_info())) return false;
  return true;
}

void AppReply::Swap(AppReply* other) {
  if (other != this) {
    std::swap(response_type_, other->response_type_);
    std::swap(event_uuid_, other->event_uuid_);
    users_.Swap(&other->users_);
    friend_requests_.Swap(&other->friend_requests_);
    event_info_.Swap(&other->event_info_);
    accepted_friends_.Swap(&other->accepted_friends_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppReply_descriptor_;
  metadata.reflection = AppReply_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace netmsg

// @@protoc_insertion_point(global_scope)
