package netmsg;

message AppRequest {
  // Uniquely identifies one of our users
  required int64 phone_id = 1;

  // This is a guarantee a message of a certain type will exist.
  // At time of writing, no situations will send concurrent messagse
  enum MessageType {
    tUpdateStatus=1;
    tCreateRoom=2;
    tCreatePost=3;
    tRegistration=4;
    tLogin=5;
    tLogout=6;
  }
  required MessageType msg_type = 2;

  // Implementation done
  message RegisterMessage {
    // Already have phone_id
    required string secured_password = 1;
    required string username = 2;
    optional string email = 3;
  }
  optional RegisterMessage reg_msg = 3;

  message LoginMessage {
    // Priority over phone login
    optional string email = 1;
    // Server-side only compare hashes
    required string secured_password = 2;
  }
  optional LoginMessage login_msg = 4;

  // Message definitions for status updating
  message StatusUpdate {
    required string body = 1;
    // Repeated 0 or more times
    repeated bytes photos = 2;
  }
  optional StatusUpdate status_updates = 5;

  enum RoomType {
    Event=1; // Activity, group
    Profile=2; // User profile, contains wall
    Page=3; // Non-affiliation. Can remove this
  }

  // Rooms represent anything with a "wall". User profiles, events, etc.
  message CreateRoom {
    required string name = 1;
    required RoomType type = 2;
    optional bytes uuid_suggestion = 3;
  }
  optional CreateRoom create_room_msg = 13;

  message RoomPostMessage {
    required bytes room_uuid = 1;
    required string body = 2;
    repeated bytes photos = 3;
  }
  optional RoomPostMessage room_post_msg = 14;

  optional bool logout_request = 15;
}

// Plan to not use this.
message AppReply {
  // fail -> error, error reason in message
  required bool success = 1;

  message CreateRoomReply {
    optional bytes success_uuid = 1;
  }
  optional CreateRoomReply create_reply=2;

}
